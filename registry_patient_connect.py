# -*- coding: utf-8 -*-
"""
(‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏à‡∏≤‡∏Å registry_patient_connect.py ‚Äî ‡πÅ‡∏Å‡πâ strike-through logic & ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏ï‡∏≤‡∏£‡∏≤‡∏á)
"""
import os, sys, json, argparse, csv, base64, secrets, hashlib
from pathlib import Path
from typing import List, Optional, Tuple, Dict
from datetime import datetime, timedelta, time as dtime

import requests
from requests.adapters import HTTPAdapter, Retry

from PySide6 import QtCore, QtGui, QtWidgets
from PySide6.QtCore import QSettings, QUrl, QLocale
from PySide6.QtGui import QIcon, QPixmap, QPainter, QLinearGradient
from PySide6.QtWebSockets import QWebSocket
from PySide6.QtWidgets import QDialog

from icd10_catalog import (
    ALL_OPERATIONS,
    diagnosis_suggestions,
    operation_suggestions,
)

# ---------------------- Helpers: "done" style ----------------------
DONE_KEYWORDS = ("‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à", "done", "completed", "finished")

def _is_done_status(text: str) -> bool:
    if not text:
        return False
    t = str(text).strip().lower()
    return any(k in t for k in DONE_KEYWORDS)

def _apply_done_style(item: QtWidgets.QTreeWidgetItem, col_count: int) -> None:
    """‡∏Ç‡∏µ‡∏î‡∏Ü‡πà‡∏≤ + ‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢"""
    font = item.font(0)
    font.setStrikeOut(True)
    gray = QtGui.QBrush(QtGui.QColor("#9ca3af"))
    for c in range(col_count):
        item.setFont(c, font)
        item.setForeground(c, gray)

# ---------------------- Modern theme ----------------------
def apply_modern_theme(widget: QtWidgets.QWidget):
    widget.setStyleSheet("""
    QWidget{font-family:'Segoe UI','Inter','Noto Sans',system-ui;font-size:11pt;color:#0f172a;background:#f4f6fb;}
    QLineEdit, QDateEdit, QTimeEdit, QComboBox, QPlainTextEdit{
        padding:8px 12px;border-radius:12px;border:1px solid #e6eaf2;background:#fff;
    }
    QLineEdit:hover, QDateEdit:hover, QTimeEdit:hover, QComboBox:hover, QPlainTextEdit:hover{border-color:#cfd8e6;}
    QLineEdit:focus, QDateEdit:focus, QTimeEdit:focus, QComboBox:focus, QPlainTextEdit:focus{border:1px solid #7aa2ff;background:#fff;}
    QPushButton{padding:9px 16px;border-radius:14px;border:1px solid #e7ecf4;background:#fff;font-weight:800;}
    QPushButton:hover{background:#f7faff;border-color:#d9e4fb;}
    QPushButton:pressed{background:#eef4ff;}
    QPushButton[variant="primary"]{background:#2563eb;border-color:#2563eb;color:#fff;}
    QPushButton[variant="primary"]:hover{background:#1d4ed8;}
    QPushButton[variant="danger"]{background:#ef4444;border-color:#ef4444;color:#fff;}
    QPushButton[variant="danger"]:hover{background:#dc2626;}
    QPushButton[variant="ghost"]{background:transparent;border-color:#e7ecf4;color:#0f172a;}
    QTableWidget, QTreeWidget{background:#fff;border:1px solid #e6e6ef;border-radius:12px;gridline-color:#e6e6ef;selection-background-color:#e0f2fe;}
    QTreeWidget::item{height:36px;}
    QTreeWidget::item:hover{ background: rgba(2,132,199,0.06); }
    QHeaderView::section{background:#f1f5f9;border-bottom:1px solid #e6eaf2;padding:10px 12px;font-weight:900;color:#0f172a;}
    QLabel[role='t']{ font-weight:900; font-size:16pt; letter-spacing:.2px; }
    QLabel[role='s']{ color:#64748b; font-size:10pt; }
    QLabel[role='h']{
        font-weight:900; font-size:12.5pt; color:#0f2167; letter-spacing:.2px;
    }
    QFrame#SectionHeader{
        background:#eef4ff; border:1px solid #dbeafe; border-radius:12px; padding:6px 10px;
    }
    QLabel[hint="1"]{color:#64748b;}
    QLabel[warn="1"]{color:#b91c1c;font-weight:700;}
    TabWidget::pane{border:0;}
    QTabBar::tab{
        padding:10px 16px;border-radius:12px;margin:4px;background:#e9eef8;font-weight:700;color:#0f172a;
    }
    QTabBar::tab:hover{ background:#eef3ff; }
    QTabBar::tab:selected{ background:#2563eb;color:#fff; }
    """)


def add_shadow(widget: QtWidgets.QWidget, blur=28, x=0, y=8, color="#24000000"):
    eff = QtWidgets.QGraphicsDropShadowEffect(widget)
    eff.setBlurRadius(blur); eff.setOffset(x, y); eff.setColor(QtGui.QColor(color))
    widget.setGraphicsEffect(eff)

class NoWheelComboBox(QtWidgets.QComboBox):
    """‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏™‡∏Å‡∏£‡∏≠‡∏•‡∏•‡πå‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ (‡∏Å‡∏±‡∏ô‡πÄ‡∏ú‡∏•‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô)"""
    def wheelEvent(self, e: QtGui.QWheelEvent) -> None:
        e.ignore()  # ‡πÉ‡∏´‡πâ scroll ‡∏ó‡∏µ‡πà parent ‡πÅ‡∏ó‡∏ô
        return


def make_search_combo(options: list[str]) -> QtWidgets.QComboBox:
    cb = NoWheelComboBox()
    cb.setEditable(True)
    cb.addItems([""] + options)
    cb.setInsertPolicy(QtWidgets.QComboBox.NoInsert)
    comp = QtWidgets.QCompleter(options)
    comp.setCaseSensitivity(QtCore.Qt.CaseInsensitive)
    comp.setFilterMode(QtCore.Qt.MatchContains)
    cb.setCompleter(comp)
    cb.setMinimumWidth(180)
    return cb


def section_header(text: str) -> QtWidgets.QFrame:
    wrap = QtWidgets.QFrame()
    wrap.setObjectName("SectionHeader")
    h = QtWidgets.QHBoxLayout(wrap)
    h.setContentsMargins(10, 6, 10, 6)
    lab = QtWidgets.QLabel(text)
    lab.setProperty("role", "h")
    h.addWidget(lab)
    h.addStretch(1)
    return wrap

class Card(QtWidgets.QFrame):
    def __init__(self, title="", subtitle=""):
        super().__init__()
        self.setObjectName("Card")
        self.setStyleSheet("""
            QFrame#Card { background:#ffffff; border:1px solid #e6eaf2; border-radius:22px; }
            QLabel[role='t'] { font-weight:900; font-size:16pt; letter-spacing:0.2px; }
            QLabel[role='s'] { color:#64748b; font-size:10pt; }
        """)
        v = QtWidgets.QVBoxLayout(self)
        v.setContentsMargins(20,20,20,20); v.setSpacing(12)
        self.title_lbl = QtWidgets.QLabel(title); self.title_lbl.setProperty("role","t"); v.addWidget(self.title_lbl)
        if subtitle:
            s = QtWidgets.QLabel(subtitle); s.setProperty("role","s"); v.addWidget(s)
        self.body = QtWidgets.QWidget()
        self.grid = QtWidgets.QGridLayout(self.body)
        self.grid.setHorizontalSpacing(14); self.grid.setVerticalSpacing(12)
        v.addWidget(self.body); add_shadow(self)

class InfoBanner(QtWidgets.QFrame):
    def __init__(self, title: str = "", subtitle: str = "", variant: str = "blue", icon: str = "üìÅ"):
        super().__init__()
        self.setObjectName("InfoBanner")
        self._variants = {
            "blue": {"bg": "#eaf6ff", "bd": "#cfe4ff", "accent": "#3b82f6"},
            "violet": {"bg": "#f4efff", "bd": "#e0d4ff", "accent": "#7c3aed"},
            "green": {"bg": "#eafaf3", "bd": "#cfeedd", "accent": "#10b981"},
        }
        pal = self._variants.get(variant, self._variants["blue"])

        self.setStyleSheet(
            f"""
        QFrame#InfoBanner {{
            background:{pal['bg']};
            border:1px solid {pal['bd']};
            border-radius:14px;
        }}
        QLabel[role='title']{{ font-weight:900; font-size:14pt; color:#0f172a; letter-spacing:.2px; }}
        QLabel[role='sub']  {{ color:#64748b; font-size:10pt; }}
        """
        )
        lay = QtWidgets.QHBoxLayout(self)
        lay.setContentsMargins(10, 10, 10, 10)
        lay.setSpacing(12)

        accent = QtWidgets.QFrame()
        accent.setFixedWidth(8)
        accent.setStyleSheet(f"QFrame{{background:{pal['accent']}; border-radius:8px;}}")
        lay.addWidget(accent, 0)

        inner = QtWidgets.QVBoxLayout()
        inner.setSpacing(4)
        top = QtWidgets.QHBoxLayout()
        top.setSpacing(8)

        self.icon_lbl = QtWidgets.QLabel(icon)
        self.icon_lbl.setStyleSheet("font-size:16pt;")
        self.title_lbl = QtWidgets.QLabel(title)
        self.title_lbl.setProperty("role", "title")
        top.addWidget(self.icon_lbl, 0)
        top.addWidget(self.title_lbl, 1)
        top.addStretch(1)

        self.sub_lbl = QtWidgets.QLabel(subtitle)
        self.sub_lbl.setProperty("role", "sub")

        inner.addLayout(top)
        inner.addWidget(self.sub_lbl)
        lay.addLayout(inner, 1)

        add_shadow(self, blur=30, x=0, y=6, color="#2a000000")

    def set_title(self, text: str):
        self.title_lbl.setText(text or "")

    def set_subtitle(self, text: str):
        self.sub_lbl.setText(text or "")

    def set_icon(self, text: str):
        self.icon_lbl.setText(text or "üìÅ")

# ---------------------- Config ----------------------
DEFAULT_HOST = os.getenv("SURGIBOT_CLIENT_HOST", "127.0.0.1")
DEFAULT_PORT = int(os.getenv("SURGIBOT_CLIENT_PORT", "8088"))
DEFAULT_TOKEN = os.getenv("SURGIBOT_SECRET", "8HDYAANLgTyjbBK4JPGx1ooZbVC86_OMJ9uEXBm3EZTidUVyzhGiReaksGA0ites")

API_HEALTH = "/api/health"; API_LIST="/api/list"; API_LIST_FULL="/api/list_full"; API_WS="/api/ws"

STATUS_COLORS = {
    "‡∏£‡∏≠‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î": "#fde047", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î": "#ef4444", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏Å‡∏ü‡∏∑‡πâ‡∏ô": "#22c55e",
    "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏∂‡∏Å": "#a855f7", "‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î": "#64748b",
}
PULSE_STATUS = {"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î","‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏Å‡∏ü‡∏∑‡πâ‡∏ô","‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏∂‡∏Å"}
DEFAULT_OR_ROOMS = ["OR1","OR2","OR3","OR4","OR5","OR6","OR8"]

WARD_LIST = [
    "‚Äî ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‚Äî",
    "‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏≠‡∏†‡∏¥‡∏ö‡∏≤‡∏•‡∏™‡∏á‡∏Ü‡πå",
    "‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏®‡∏±‡∏•‡∏¢‡∏Å‡∏£‡∏£‡∏° ‡∏ä‡∏±‡πâ‡∏ô 4",
    "‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏®‡∏±‡∏•‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠",
    "‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏®‡∏±‡∏•‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏´‡∏ç‡∏¥‡∏á",
    "‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏®‡∏±‡∏•‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏¢",
    "‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏≠‡∏≤‡∏¢‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° ‡∏ä‡∏±‡πâ‡∏ô 5",
    "‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏≠‡∏≤‡∏¢‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° ‡∏ä‡∏±‡πâ‡∏ô 4",
    "‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ICU-MED",
    "‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ ICU ‡∏£‡∏ß‡∏°",
    "‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏≠‡∏≤‡∏¢‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏´‡∏ç‡∏¥‡∏á",
    "‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏≠‡∏≤‡∏¢‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏¢",
    "‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏£‡∏ß‡∏°‡∏ô‡πâ‡∏≥‡πÉ‡∏à",
    "‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏´‡∏ô‡∏±‡∏Å‡∏Å‡∏∏‡∏°‡∏≤‡∏£‡πÄ‡∏ß‡∏ä",
    "‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏´‡∏π ‡∏ï‡∏≤ ‡∏Ñ‡∏≠ ‡∏à‡∏°‡∏π‡∏Å",
    "‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏Å‡∏∏‡∏°‡∏≤‡∏£‡πÄ‡∏ß‡∏ä",
    "‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏π‡∏ï‡∏¥-‡∏ô‡∏£‡∏µ‡πÄ‡∏ß‡∏ä ‡∏ä‡∏±‡πâ‡∏ô 5",
    "‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏π‡∏ï‡∏¥-‡∏ô‡∏£‡∏µ‡πÄ‡∏ß‡∏ä ‡∏ä‡∏±‡πâ‡∏ô 4",
    "‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏®‡∏±‡∏•‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ó‡πÅ‡∏•‡∏∞‡∏™‡∏°‡∏≠‡∏á",
    "‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏™‡∏π‡∏ï‡∏¥-‡∏ô‡∏£‡∏µ‡πÄ‡∏ß‡∏ä",
    "‡∏´‡πâ‡∏≠‡∏á‡∏Ñ‡∏•‡∏≠‡∏î",
    "‡∏´‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î",
    "‡πÅ‡∏ú‡∏ô‡∏Å‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏‡πÅ‡∏•‡∏∞‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô",
]

WARD_PLACEHOLDER = WARD_LIST[0]

SCRUB_NURSES = [
    "‡∏≠‡∏£‡∏∏‡∏ì‡∏µ", "‡∏®‡∏¥‡∏ß‡∏î‡∏≤‡∏ï‡∏¥‡πå", "‡∏Å‡∏±‡∏ç‡∏ç‡∏ì‡∏±‡∏ä", "‡∏ä‡∏±‡∏ç‡∏ç‡∏≤‡∏†‡∏±‡∏Ñ", "‡∏™‡∏∏‡∏ô‡∏ó‡∏£‡∏µ", "‡∏û‡∏¥‡∏®‡∏°‡∏±‡∏¢", "‡πÄ‡∏ó‡∏ß‡∏±‡∏ç", "‡∏Å‡∏±‡∏ô‡∏ï‡πå‡∏û‡∏á‡∏©‡πå",
    "‡∏õ‡∏ô‡∏±‡∏è‡∏ê‡∏≤", "‡∏™‡∏∏‡∏à‡∏¥‡∏ï‡∏£‡∏≤", "‡∏ä‡∏±‡∏¢‡∏¢‡∏á‡∏Ñ‡πå", "‡∏™‡∏∏‡∏†‡∏≤‡∏ß‡∏±‡∏•‡∏¢‡πå", "‡∏à‡∏±‡∏ô‡∏ó‡∏à‡∏£", "‡∏ß‡∏£‡∏£‡∏ì‡∏¥‡∏†‡∏≤", "‡∏ì‡∏±‡∏ê‡∏û‡∏á‡∏©‡πå", "‡∏ï‡∏∞‡∏ß‡∏±‡∏ô",
    "‡∏õ‡∏ß‡∏µ‡∏ì‡∏≤", "‡∏ô‡∏¥‡∏§‡∏°‡∏•", "‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤", "‡∏™‡∏¢‡∏∏‡∏°‡∏û‡∏£", "‡∏™‡∏∏‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡πå", "‡∏ö‡∏∏‡∏®‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå", "‡∏®‡∏¥‡∏£‡∏¥‡∏Å‡∏±‡∏ç‡∏ç‡∏≤", "‡∏ô‡∏£‡∏≤‡∏ß‡∏±‡∏ï‡∏ô‡πå",
    "‡∏ö‡∏±‡∏ì‡∏ë‡∏¥‡∏ï‡∏≤", "‡∏ß‡∏£‡∏£‡∏ì‡∏ß‡∏¥‡∏™‡∏≤", "‡∏ä‡∏•‡∏î‡∏≤", "‡∏ß‡∏£‡∏µ‡∏™‡∏≤",
]


ORG_NAME="ORNBH"; APP_SHARED="SurgiBotShared"; OR_KEY="schedule/or_rooms"; ENTRIES_KEY="schedule/entries"; SEQ_KEY="schedule/seq"
APP_SETTINGS="RegistryPatientConnect"
PDPA_ACK_KEY="pdpa/ack"
SECRET_SALT_KEY="sec/hn_salt"
FERNET_KEY="sec/fernet_key"  # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏à‡∏∞‡∏ï‡πà‡∏≠‡∏¢‡∏≠‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
SEED_OP_KEY="seed/ops"          # map: specialty_key -> list[str]
SEED_DX_KEY="seed/diags"        # map: specialty_key -> list[str]

DEPT_DOCTORS = {
    "Surgery | ‡∏®‡∏±‡∏•‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ": ["‡∏ô‡∏û.‡∏™‡∏∏‡∏£‡∏¥‡∏¢‡∏≤ ‡∏Ñ‡∏∏‡∏ì‡∏≤‡∏ä‡∏ô","‡∏ô‡∏û.‡∏ò‡∏ô‡∏ß‡∏±‡∏í‡∏ô‡πå ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏û‡∏£‡∏´‡∏°","‡∏û‡∏ç.‡∏™‡∏∏‡∏†‡∏≤‡∏†‡∏£‡∏ì‡πå ‡∏û‡∏¥‡∏ì‡∏û‡∏≤‡∏ó‡∏¢‡πå","‡∏û‡∏ç.‡∏£‡∏±‡∏ê‡∏û‡∏£ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏£","‡∏û‡∏ç.‡∏û‡∏¥‡∏ä‡∏±‡∏¢ ‡∏™‡∏∏‡∏ß‡∏±‡∏í‡∏ô‡∏û‡∏π‡∏ô‡∏•‡∏≤‡∏†"],
    "Orthopedics | ‡∏®‡∏±‡∏•‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠": ["‡∏ô‡∏û.‡∏ä‡∏±‡∏ä‡∏û‡∏• ‡∏≠‡∏á‡∏Ñ‡πå‡πÇ‡∏Ü‡∏©‡∏¥‡∏ï","‡∏ô‡∏û.‡∏ì‡∏±‡∏ê‡∏û‡∏á‡∏®‡πå ‡∏®‡∏£‡∏µ‡πÇ‡∏û‡∏ô‡∏ó‡∏≠‡∏á","‡∏ô‡∏û.‡∏≠‡∏≥‡∏ô‡∏≤‡∏à ‡∏≠‡∏ô‡∏±‡∏ô‡∏ï‡πå‡∏ß‡∏±‡∏í‡∏ô‡∏Å‡∏∏‡∏•","‡∏ô‡∏û.‡∏≠‡∏†‡∏¥‡∏ä‡∏≤‡∏ï‡∏¥ ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞","‡∏ô‡∏û.‡∏Å‡∏§‡∏©‡∏é‡∏≤ ‡∏≠‡∏¥‡πâ‡∏á‡∏≠‡∏≥‡∏û‡∏£","‡∏ô‡∏û.‡∏ß‡∏¥‡∏©‡∏ì‡∏∏ ‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô‡∏ò‡πå"],
    "Urology | ‡∏®‡∏±‡∏•‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞": ["‡∏û‡∏ç.‡∏™‡∏≤‡∏¢‡∏ù‡∏ô ‡∏ö‡∏£‡∏£‡∏ì‡∏à‡∏¥‡∏ï‡∏£‡πå"],
    "ENT | ‡∏®‡∏±‡∏•‡∏¢‡∏Å‡∏£‡∏£‡∏° ‡πÇ‡∏™‡∏ï ‡∏®‡∏≠ ‡∏ô‡∏≤‡∏™‡∏¥‡∏Å": ["‡∏û‡∏ç.‡∏û‡∏¥‡∏£‡∏∏‡∏ì‡∏¢‡∏≤ ‡πÅ‡∏™‡∏ô‡∏ß‡∏±‡∏ô‡∏î‡∏µ","‡∏û‡∏ç.‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏û‡∏£ ‡∏´‡∏°‡∏ß‡∏î‡πÑ‡∏ò‡∏™‡∏á","‡∏ô‡∏û.‡∏ß‡∏£‡∏ß‡∏¥‡∏ä ‡∏û‡∏•‡πÄ‡∏ß‡∏µ‡∏¢‡∏á‡∏ò‡∏£‡∏£‡∏°"],
    "Obstetrics-Gynecology | ‡∏™‡∏π‡∏ï‡∏¥-‡∏ô‡∏£‡∏µ‡πÄ‡∏ß‡∏ä": ["‡∏ô‡∏û.‡∏™‡∏∏‡∏£‡∏à‡∏¥‡∏ï‡∏ï‡πå ‡∏ô‡∏¥‡∏°‡∏¥‡∏ï‡∏£‡∏ß‡∏á‡∏©‡πå‡∏™‡∏Å‡∏∏‡∏•","‡∏û‡∏ç.‡∏Ç‡∏ß‡∏±‡∏ç‡∏ï‡∏≤ ‡∏ó‡∏∏‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏∑‡∏≠‡∏á","‡∏û‡∏ç.‡∏ß‡∏±‡∏ä‡∏£‡∏≤‡∏†‡∏£‡∏ì‡πå ‡∏≠‡∏ô‡∏ß‡∏±‡∏ä‡∏ä‡∏Å‡∏∏‡∏•","‡∏û‡∏ç.‡∏£‡∏∏‡πà‡∏á‡∏§‡∏î‡∏µ ‡πÇ‡∏Ç‡∏°‡∏û‡∏±‡∏ï‡∏£","‡∏û‡∏ç.‡∏ê‡∏¥‡∏ï‡∏¥‡∏°‡∏ô ‡∏ä‡∏±‡∏¢‡∏ä‡∏ô‡∏∞‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå"],
    "Ophthalmology | ‡∏à‡∏±‡∏Å‡∏©‡∏∏": ["‡∏ô‡∏û.‡∏™‡∏£‡∏≤‡∏ß‡∏∏‡∏ò ‡∏™‡∏≤‡∏£‡∏µ‡∏¢‡πå","‡∏û‡∏ç.‡∏î‡∏ß‡∏¥‡∏©‡∏≤ ‡∏≠‡∏±‡∏á‡∏®‡∏£‡∏µ‡∏õ‡∏£‡∏∞‡πÄ‡∏™‡∏£‡∏¥‡∏ê","‡∏û‡∏ç.‡∏™‡∏≤‡∏ß‡∏¥‡∏ï‡∏£‡∏µ ‡∏ñ‡∏ô‡∏≠‡∏°‡∏ß‡∏á‡∏®‡πå‡πÑ‡∏ó‡∏¢","‡∏û‡∏ç.‡∏™‡∏µ‡∏Å‡∏ä‡∏°‡∏û‡∏π ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏±‡∏ï‡∏¢‡∏≤‡∏ò‡∏¥‡∏©‡∏ê‡∏≤‡∏ô","‡∏û‡∏ç.‡∏ô‡∏±‡∏ô‡∏ó‡πå‡∏ô‡∏†‡∏±‡∏™ ‡∏ä‡∏µ‡∏ß‡∏∞‡πÄ‡∏Å‡∏£‡∏µ‡∏¢‡∏á‡πÑ‡∏Å‡∏£"],
    "Maxillofacial | ‡∏®‡∏±‡∏•‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≤‡∏Å‡∏£‡∏£‡πÑ‡∏Å‡∏£": ["‡∏ô‡∏û.‡∏â‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ê ‡πÄ‡∏î‡∏ä‡∏≤","‡∏û‡∏ç.‡∏≠‡∏£‡∏∏‡∏ì‡∏ô‡∏†‡∏≤ ‡∏Ñ‡∏¥‡∏™‡∏≤‡∏£‡∏±‡∏á"],
}

def _dept_key(label:str)->str:
    t=(label or "").lower()
    if "‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å" in t or "ortho" in t: return "Orthopedics"
    if "‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞" in t or "uro" in t: return "Urology"
    if "‡∏™‡∏π‡∏ï‡∏¥" in t or "ob" in t: return "OBGYN"
    if "‡πÇ‡∏™‡∏ï" in t or "ent" in t or "‡∏Ñ‡∏≠" in t: return "ENT"
    if "‡∏à‡∏±‡∏Å‡∏©‡∏∏" in t or "oph" in t: return "Ophthalmology"
    if "‡∏Ç‡∏≤‡∏Å‡∏£‡∏£‡πÑ‡∏Å‡∏£" in t or "max" in t: return "Maxillofacial"
    return "Surgery"

class Toast(QtWidgets.QFrame):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setStyleSheet("""
            QFrame{background:#111827; color:#fff; border-radius:12px; padding:10px 14px;}
            QLabel{color:#fff;}
        """)
        add_shadow(self, blur=30, x=0, y=8, color="#40000000")
        self.lab = QtWidgets.QLabel("", self)
        lay = QtWidgets.QHBoxLayout(self)
        lay.setContentsMargins(14,10,14,10)
        lay.addWidget(self.lab)
        self._anim: Optional[QtCore.QPropertyAnimation] = None
        self.hide()

    def show_toast(self, text: str, msec: int = 2200):
        self.lab.setText(text)
        if self.parent():
            p = self.parent()
            geo = p.geometry()
            self.adjustSize()
            w, h = self.width(), self.height()
            self.setGeometry(geo.width() - w - 24, 24, w, h)

        if self._anim is not None:
            try:
                self._anim.stop()
            except Exception:
                pass
            self._anim.deleteLater()
            self._anim = None

        self.setWindowOpacity(0.0)
        self.show()
        self.raise_()

        anim = QtCore.QPropertyAnimation(self, b"windowOpacity", self)
        anim.setDuration(msec)
        anim.setStartValue(0.0)
        anim.setKeyValueAt(0.1, 1.0)
        anim.setKeyValueAt(0.9, 1.0)
        anim.setEndValue(0.0)

        anim.finished.connect(self.hide)
        self._anim = anim
        anim.start()

class StatusChipWidget(QtWidgets.QWidget):
    def __init__(self, text:str, color:str, pulse:bool=False, parent=None):
        super().__init__(parent)
        self._text=text; self._color=color; self._pulse=pulse
        if pulse:
            self.eff = QtWidgets.QGraphicsOpacityEffect(self); self.setGraphicsEffect(self.eff)
            self.anim = QtCore.QPropertyAnimation(self.eff, b"opacity", self)
            self.anim.setDuration(1200); self.anim.setStartValue(0.5); self.anim.setEndValue(1.0)
            self.anim.setEasingCurve(QtCore.QEasingCurve.InOutQuad); self.anim.setLoopCount(-1); self.anim.start()
    def minimumSizeHint(self):
        fm = QtGui.QFontMetrics(self.font())
        w = fm.horizontalAdvance(self._text) + 22 + 16
        h = fm.height() + 10
        return QtCore.QSize(w, h)
    def paintEvent(self, e):
        p=QtGui.QPainter(self); p.setRenderHint(QtGui.QPainter.Antialiasing, True)
        rect = self.rect().adjusted(2,2,-2,-2)
        bg = QtGui.QColor(self._color); bg.setAlpha(205)
        p.setPen(QtCore.Qt.NoPen); p.setBrush(bg)
        p.drawRoundedRect(rect, 10, 10)
        p.setPen(QtGui.QColor("#ffffff"))
        p.drawText(rect.adjusted(12,0,-8,0), QtCore.Qt.AlignVCenter|QtCore.Qt.AlignLeft, self._text)

class ScheduleEntry(QtCore.QObject):
    def __init__(
        self,
        or_room="",
        dt=None,
        time_str="",
        hn="",
        name="",
        age=0,
        dept="",
        doctor="",
        diags=None,
        ops=None,
        ward="",
        case_size="",
        queue=0,
        period="in",
        urgency="Elective",
        assist1="",
        assist2="",
        scrub="",
        circulate="",
        time_start="",
        time_end="",
        case_uid: str = "",
        version: int = 1,
        state: str = "scheduled",
        returning_started_at: str = "",
        returned_to_ward_at: str = "",
        postop_completed: bool = False,
    ):
        super().__init__()
        self.or_room = or_room
        self.date = dt or datetime.now().date()
        self.time = time_str
        self.hn = (hn or "").strip()
        self.name = (name or "").strip()
        self.age = int(age) if str(age).isdigit() else 0
        self.dept = dept
        self.doctor = doctor
        self.diags = diags or []
        self.ops = ops or []
        self.ward = (ward or "").strip()
        self.case_size = (case_size or "").strip()  # Minor/Major
        self.queue = int(queue) if str(queue).isdigit() else 0
        self.period = period  # "in" | "off"
        self.urgency = (urgency or "Elective")
        self.assist1 = assist1
        self.assist2 = assist2
        self.scrub = scrub
        self.circulate = circulate
        self.time_start = time_start
        self.time_end = time_end
        self.case_uid = case_uid or self._gen_case_uid()
        self.version = int(version or 1)
        self.state = state or "scheduled"
        self.returning_started_at = returning_started_at or ""
        self.returned_to_ward_at = returned_to_ward_at or ""
        self.postop_completed = bool(postop_completed)

    def _gen_case_uid(self) -> str:
        base = f"{self.or_room}|{self.hn}|{self.time}|{self.date}"
        return hashlib.sha1(base.encode("utf-8", "ignore")).hexdigest()

    def to_dict(self):
        return {
            "or": self.or_room,
            "date": str(self.date),
            "time": self.time,
            "hn": self.hn,
            "name": self.name,
            "age": self.age,
            "dept": self.dept,
            "doctor": self.doctor,
            "diags": self.diags,
            "ops": self.ops,
            "ward": self.ward,
            "case_size": self.case_size,
            "queue": self.queue,
            "period": self.period,
            "urgency": self.urgency,
            "assist1": self.assist1,
            "assist2": self.assist2,
            "scrub": self.scrub,
            "circulate": self.circulate,
            "time_start": self.time_start,
            "time_end": self.time_end,
            "case_uid": self.case_uid,
            "version": self.version,
            "state": self.state,
            "returning_started_at": self.returning_started_at,
            "returned_to_ward_at": self.returned_to_ward_at,
            "postop_completed": self.postop_completed,
        }

    @staticmethod
    def from_dict(d:dict):
        try:
            fromiso = datetime.fromisoformat(d.get("date")).date()
        except Exception:
            fromiso = datetime.now().date()
        return ScheduleEntry(
            d.get("or",""),
            fromiso,
            d.get("time",""),
            d.get("hn",""),
            d.get("name",""),
            d.get("age",0),
            d.get("dept",""),
            d.get("doctor",""),
            d.get("diags",[]) or [],
            d.get("ops",[]) or [],
            d.get("ward",""),
            d.get("case_size",""),
            d.get("queue",0),
            d.get("period","in"),
            d.get("urgency","Elective"),
            d.get("assist1",""),
            d.get("assist2",""),
            d.get("scrub",""),
            d.get("circulate",""),
            d.get("time_start",""),
            d.get("time_end",""),
            d.get("case_uid",""),
            d.get("version", 1),
            d.get("state","scheduled"),
            d.get("returning_started_at",""),
            d.get("returned_to_ward_at",""),
            bool(d.get("postop_completed", False)),
        )

    def uid(self)->str:
        return f"{self.or_room}|{self.hn}|{self.time}|{self.date}"

class SharedScheduleModel:
    def __init__(self):
        self.s = QSettings(ORG_NAME, APP_SHARED)
        self.entries = self._load(); self.or_rooms = self._load_or()
        if not self.s.contains(SEQ_KEY): self.s.setValue(SEQ_KEY, 0)
    def _load(self)->List[ScheduleEntry]:
        raw=self.s.value(ENTRIES_KEY, []); out=[]
        if isinstance(raw,list):
            for d in raw:
                if isinstance(d,dict): out.append(ScheduleEntry.from_dict(d))
        return out
    def _save(self):
        self.s.setValue(ENTRIES_KEY, [e.to_dict() for e in self.entries])
        self.s.setValue(SEQ_KEY, int(self.s.value(SEQ_KEY,0))+1); self.s.sync()
    def _load_or(self)->List[str]:
        lst=self.s.value(OR_KEY)
        if not isinstance(lst,list) or not lst: lst=DEFAULT_OR_ROOMS[:]; self.s.setValue(OR_KEY, lst)
        return [str(x) for x in lst]
    def set_or_rooms(self, rooms:List[str]):
        norm=[]
        for r in rooms:
            r=r.strip().upper()
            if r and r.startswith("OR") and r!="OR7" and r not in norm: norm.append(r)
        if not norm: norm=DEFAULT_OR_ROOMS[:]
        self.or_rooms=norm; self.s.setValue(OR_KEY, norm); self.s.setValue(SEQ_KEY, int(self.s.value(SEQ_KEY,0))+1); self.s.sync()
    def add(self, e:ScheduleEntry): self.entries.append(e); self._save()
    def update(self, idx:int, e:ScheduleEntry):
        if 0<=idx<len(self.entries): self.entries[idx]=e; self._save()
    def delete(self, idx:int):
        if 0<=idx<len(self.entries): self.entries.pop(idx); self._save()
    def seq(self)->int: return int(self.s.value(SEQ_KEY, 0))

class LocalDBLogger:
    def __init__(self, elective_path="schedule_elective.db", emergency_path="schedule_emergency.db"):
        import sqlite3
        self.sqlite3 = sqlite3
        self.conn_e = sqlite3.connect(elective_path)
        self.conn_x = sqlite3.connect(emergency_path)
        self._init(self.conn_e)
        self._init(self.conn_x)

    def _init(self, conn):
        cur = conn.cursor()
        cur.execute("""
            CREATE TABLE IF NOT EXISTS schedule(
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp TEXT,
                urgency TEXT,
                period TEXT,
                or_room TEXT,
                date TEXT,
                time TEXT,
                hn TEXT,
                name TEXT,
                age INTEGER,
                dept TEXT,
                doctor TEXT,
                diagnosis TEXT,
                operation TEXT,
                ward TEXT,
                queue INTEGER,
                time_start TEXT,
                time_end TEXT,
                case_size TEXT
            )
        """)
        conn.commit()

    def append_entry(self, e: 'ScheduleEntry'):
        ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        row = (
            ts,
            e.urgency,
            e.period,
            e.or_room,
            str(e.date),
            e.time,
            e.hn,
            e.name,
            int(e.age or 0),
            e.dept,
            e.doctor,
            " with ".join(e.diags),
            " with ".join(e.ops),
            e.ward,
            int(e.queue or 0),
            e.time_start or "",
            e.time_end or "",
            e.case_size or "",
        )

        conn = self.conn_x if str(e.urgency).lower() == "emergency" else self.conn_e
        cur = conn.cursor()
        cur.execute(
            """
            INSERT INTO schedule(
                timestamp, urgency, period, or_room, date, time,
                hn, name, age, dept, doctor,
                diagnosis, operation, ward, queue,
                time_start, time_end, case_size
            )
            VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
            """,
            row,
        )
        conn.commit()

# ---------------------- Security helpers (salt & hash) ----------------------
def _app_settings() -> QSettings:
    # ‡πÉ‡∏ä‡πâ settings ‡∏ä‡∏∏‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏≠‡∏õ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö salt/ack
    return QSettings(ORG_NAME, APP_SETTINGS)

def _get_or_create_secret(key: str, nbytes: int = 32) -> str:
    s = _app_settings()
    if not s.contains(key):
        # ‡πÉ‡∏ä‡πâ urlsafe token ‡πÄ‡∏û‡∏∑‡πà‡∏≠ copy/backup ‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢
        tok = secrets.token_urlsafe(nbytes)
        s.setValue(key, tok); s.sync()
    return str(s.value(key))

def hn_hash(hn: str) -> str:
    """De-identified hash ‡∏Ç‡∏≠‡∏á HN: SHA-256(HN + salt)"""
    salt = _get_or_create_secret(SECRET_SALT_KEY, 32)
    x = (str(hn) + salt).encode("utf-8", "ignore")
    return hashlib.sha256(x).hexdigest()

# (‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≠‡∏¢‡∏≠‡∏î: ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ä‡∏∑‡πà‡∏≠/‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç)
# from cryptography.fernet import Fernet
# def _fernet() -> Fernet:
#     key = _get_or_create_secret(FERNET_KEY, 32)
#     # Fernet key ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô base64 32 bytes ‚Üí ‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 32 bytes ‡πÅ‡∏•‡πâ‡∏ß b64
#     k = hashlib.sha256(key.encode()).digest()
#     return Fernet(base64.urlsafe_b64encode(k))
# def enc(txt:str)->str: return _fernet().encrypt(txt.encode()).decode()
# def dec(tok:str)->str: return _fernet().decrypt(tok.encode()).decode()

# ---------------------- PDPA / Consent ----------------------
class PDPANoticeDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô PDPA / ‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        self.setModal(True)
        lay = QtWidgets.QVBoxLayout(self)
        text = QtWidgets.QTextEdit(self)
        text.setReadOnly(True)
        text.setMinimumHeight(220)
        text.setStyleSheet("QTextEdit{background:#fff;border:1px solid #e6eaf2;border-radius:12px;padding:10px;}")
        text.setText(
            "‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:\n"
            "- ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô/‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏ß‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î ‡πÅ‡∏•‡∏∞‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î\n"
            "- ‡πÉ‡∏ä‡πâ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡∏ï‡∏ô (de-identified) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (QI)\n\n"
            "‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• (PDPA):\n"
            "- ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (data minimization)\n"
            "- ‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏° Export ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡∏ï‡∏ô (‡πÅ‡∏Æ‡∏ä HN) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå\n"
            "- ‡∏´‡πâ‡∏≤‡∏°‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å/‡∏ñ‡πà‡∏≤‡∏¢‡πÇ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï\n"
            "- ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô\n\n"
            "‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ó‡πà‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô"
        )
        chk = QtWidgets.QCheckBox("‡∏â‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° PDPA ‡πÅ‡∏•‡πâ‡∏ß")
        btn = QtWidgets.QPushButton("‡∏ï‡∏Å‡∏•‡∏á"); btn.setProperty("variant","primary"); btn.setEnabled(False)
        chk.toggled.connect(lambda b: btn.setEnabled(b))
        btn.clicked.connect(self.accept)
        lay.addWidget(text); lay.addWidget(chk); lay.addWidget(btn)

def _fmt_td(td: timedelta) -> str:
    total = int(abs(td.total_seconds())); h = total // 3600; m = (total % 3600) // 60; s = total % 60
    return f"{h:02d}:{m:02d}:{s:02d}"

def _parse_iso(ts: str):
    if not ts: return None
    try: return datetime.fromisoformat(ts.replace("Z",""))
    except Exception: return None

def _now_iso() -> str:
    return datetime.now().strftime("%Y-%m-%dT%H:%M:%S")

def _is_postop_complete_entry(e: "ScheduleEntry") -> bool:
    if not (e.time_start and e.time_end):
        return False
    try:
        hh1, mm1 = e.time_start.split(":")
        hh2, mm2 = e.time_end.split(":")
        t1 = int(hh1) * 60 + int(mm1)
        t2 = int(hh2) * 60 + int(mm2)
        if t2 < t1:
            return False
    except Exception:
        return False
    if not (e.scrub or e.circulate or e.assist1 or e.assist2):
        return False
    if not (e.ops or e.diags):
        return False
    return True

def _app_icon() -> QIcon:
    pm=QtGui.QPixmap(64,64); pm.fill(QtCore.Qt.transparent)
    pa=QPainter(pm); pa.setRenderHint(QtGui.QPainter.Antialiasing,True)
    gr=QLinearGradient(0,0,64,64)
    gr.setColorAt(0,"#d9ecff"); gr.setColorAt(.55,"#e1f5ff"); gr.setColorAt(1,"#e6fff5")
    pa.setBrush(gr); pa.setPen(QtCore.Qt.NoPen); pa.drawEllipse(6,6,52,52)
    pa.setBrush(QtGui.QColor("#0f172a"))
    pa.drawEllipse(26,20,12,12)
    pa.end()
    return QIcon(pm)


def _load_app_icon() -> QIcon:
    p = Path("assets/app.ico")
    if p.exists():
        ico = QIcon(str(p))
        if not ico.isNull():
            return ico
    return _app_icon()

def _now_period(dt_val: datetime) -> str:
    start = dtime(8,30); end = dtime(16,30)
    return "in" if (start <= dt_val.time() < end) else "off"

def _period_label(code: str) -> str: return "‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£" if code=="in" else "‡∏ô‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£"

class ClientHTTP:
    def __init__(self, host=DEFAULT_HOST, port=DEFAULT_PORT, token=DEFAULT_TOKEN, timeout=1.2):
        self.base, self.token, self.timeout = f"http://{host}:{port}", token, timeout
        self.s = requests.Session()
        self.s.mount("http://", HTTPAdapter(max_retries=Retry(
            total=3, connect=2, read=2, backoff_factor=0.35,
            status_forcelist=(429,500,502,503,504),
            allowed_methods=frozenset(["GET","POST"])
        )))
    def health(self):
        r=self.s.get(self.base+API_HEALTH, timeout=self.timeout, headers={"Accept":"application/json"})
        r.raise_for_status(); return r.json()
    def list_items(self):
        try:
            r=self.s.get(f"{self.base}{API_LIST_FULL}?token={self.token}",timeout=self.timeout,headers={"Accept":"application/json"})
            if r.status_code==200: return self._wrap(r.json())
        except Exception: pass
        try:
            r=self.s.get(self.base+API_LIST,timeout=self.timeout,headers={"Accept":"application/json"})
            if r.status_code==200: return self._wrap(r.json())
        except Exception: pass
        return {"items":[]}
    @staticmethod
    def _wrap(d):
        if isinstance(d,list): return {"items":d}
        if isinstance(d,dict):
            for k in ("items","data","table","rows","list"):
                if k in d and isinstance(d[k],list): return {"items":d[k]}
            for v in d.values():
                if isinstance(v,list): return {"items":v}
            return d
        return {"items":[]}

def extract_rows(payload):
    if isinstance(payload,list): src=payload
    elif isinstance(payload,dict):
        for k in ("items","data","table","rows","list"):
            if k in payload and isinstance(payload[k],list): src=payload[k]; break
        else:
            src=next((v for v in payload.values() if isinstance(v, list)), [])
    else: src=[]
    rows=[]
    for i,it in enumerate(src,1):
        if not isinstance(it,dict): continue
        hn=str(it.get("hn_full") or it.get("hn") or "").strip()
        pid=str(it.get("patient_id") or it.get("pid") or it.get("queue_id") or "")
        if not pid:
            orr=str(it.get("or") or it.get("or_room") or ""); q=str(it.get("queue") or it.get("q") or "")
            if orr and q: pid=f"{orr}-{q}"
        status=str(it.get("status") or "")
        ts=(it.get("timestamp") or it.get("ts") or it.get("updated_at") or it.get("created_at") or it.get("time"))
        eta=it.get("eta_minutes", it.get("eta", it.get("eta_min")))
        if isinstance(eta,str) and eta.isdigit(): eta=int(eta)
        elif not isinstance(eta,int): eta=None
        rows.append({"id": hn if hn else i, "hn_full": hn or None, "patient_id": pid, "status": status, "timestamp": ts, "eta_minutes": eta})
    return rows

class QueueSelectWidget(QtWidgets.QWidget):
    changed = QtCore.Signal(int)
    def __init__(self, value:int=0, parent=None):
        super().__init__(parent)
        h = QtWidgets.QHBoxLayout(self); h.setContentsMargins(2, 0, 2, 0); h.setSpacing(6)
        self.combo = QtWidgets.QComboBox()
        self.combo.addItem("‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤", 0)
        for i in range(1, 10): self.combo.addItem(str(i), i)
        self.combo.setStyleSheet("""
            QComboBox{
                padding:6px 10px;border-radius:10px;border:1px solid #e6eaf2;background:#ffffff;
                min-width: 110px; font-weight:700;
            }
            QComboBox:hover{border-color:#cfd8e6;}
            QComboBox:focus{border:1px solid #7aa2ff;background:#ffffff;}
        """)
        idx = 0
        for i in range(self.combo.count()):
            if int(self.combo.itemData(i)) == int(value): idx = i; break
        self.combo.setCurrentIndex(idx)
        self.combo.currentIndexChanged.connect(self._emit_changed)
        h.addWidget(self.combo, 1)
        self.setMinimumWidth(120)
        self.setSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
    def _emit_changed(self, _i): self.changed.emit(int(self.combo.currentData() or 0))
    def value(self)->int: return int(self.combo.currentData() or 0)

class Main(QtWidgets.QWidget):
    def __init__(self, host, port, token):
        super().__init__()
        self.cli = ClientHTTP(host, port, token)
        self.sched = SharedScheduleModel()
        self.db_logger = LocalDBLogger()
        self.ws=None; self.rows_cache=[]
        self.seq_seen = self.sched.seq()
        icon = _load_app_icon()
        self.setWindowIcon(icon)
        self.tray = QtWidgets.QSystemTrayIcon(icon, self); self.tray.show()

        # new: ‡πÄ‡∏Å‡πá‡∏ö HN ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏ô Monitor (historical) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Ç‡∏µ‡∏î‡∏Ü‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
        self._historical_monitor_seen = set()

        # form edit mode
        self._edit_idx: Optional[int] = None
        self._last_focus_uid: Optional[str] = None  # ‡πÉ‡∏ä‡πâ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å

        self.toast = Toast(self)
        self._current_specialty_key = "Surgery"

        self.setWindowTitle("Registry Patient Connect ‚Äî ORNBH")
        self.resize(1360, 900)
        apply_modern_theme(self)
        self._build_ui(); self._load_settings(); self._pdpa_gate(); self._start_timers()

    # ---------- UI ----------
    def _build_ui(self):
        outer = QtWidgets.QVBoxLayout(self); outer.setSpacing(12); outer.setContentsMargins(14,14,14,14)
        self.tabs = QtWidgets.QTabWidget()
        self.tabs.setStyleSheet("QTabWidget::pane{border:0;} QTabBar::tab{padding:10px 16px;border-radius:12px;margin:4px;background:#e9eef8;} QTabBar::tab:selected{background:#2563eb;color:#fff;}")
        outer.addWidget(self.tabs)

        # TAB 1 ‚Äî ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô (‡∏´‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢ ScrollArea ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ó‡∏£‡∏•‡∏´‡∏î)
        tab1_inner = QtWidgets.QWidget()
        t1 = QtWidgets.QVBoxLayout(tab1_inner); t1.setSpacing(12); t1.setContentsMargins(0,0,0,0)
        t1_banner = InfoBanner(
            title="‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ (Schedule ‚Äî Private)",
            subtitle="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡πÅ‡∏ä‡∏£‡πå‡πÉ‡∏´‡πâ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå",
            variant="blue",
            icon="üìù",
        )
        t1.addWidget(t1_banner)
        form = Card("‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ (Schedule ‚Äî Private)", "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡πÅ‡∏ä‡∏£‡πå‡πÉ‡∏´‡πâ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå")
        form.title_lbl.hide()
        g=form.grid; r=0
        g.setColumnStretch(0, 0); g.setColumnStretch(1, 2); g.setColumnStretch(2, 0); g.setColumnStretch(3, 1)
        g.setColumnStretch(4, 0); g.setColumnStretch(5, 2)
        g.addWidget(QtWidgets.QLabel("OR"), r,0)
        self.cb_or=QtWidgets.QComboBox(); self._refresh_or_cb(self.cb_or); self.cb_or.setMinimumWidth(140)
        g.addWidget(self.cb_or, r,1)
        self.btn_manage_or=QtWidgets.QPushButton("‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ OR"); self.btn_manage_or.setProperty("variant","ghost")
        g.addWidget(self.btn_manage_or, r,2,1,2)
        r+=1
        g.addWidget(QtWidgets.QLabel("‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"), r,0)
        self.ent_name=QtWidgets.QLineEdit()
        g.addWidget(self.ent_name, r,1,1,3)
        g.addWidget(QtWidgets.QLabel("‡∏≠‡∏≤‡∏¢‡∏∏"), r,4)
        self.ent_age=QtWidgets.QLineEdit(); self.ent_age.setValidator(QtGui.QIntValidator(0,150,self))
        g.addWidget(self.ent_age,r,5)
        r+=1
        g.addWidget(QtWidgets.QLabel("HN"), r,0)
        self.ent_hn=QtWidgets.QLineEdit(); self.ent_hn.setMaxLength(9); self.ent_hn.setValidator(QtGui.QIntValidator(0,999999999,self))
        g.addWidget(self.ent_hn,r,1)
        g.addWidget(QtWidgets.QLabel("Ward"), r,2)
        self.cb_ward = QtWidgets.QComboBox(); self.cb_ward.setEditable(True)
        self.cb_ward.addItems(WARD_LIST)
        self.cb_ward.setInsertPolicy(QtWidgets.QComboBox.NoInsert)
        ward_options = [w for w in WARD_LIST if w and w != WARD_PLACEHOLDER]
        comp = QtWidgets.QCompleter(ward_options)
        comp.setCaseSensitivity(QtCore.Qt.CaseInsensitive)
        comp.setFilterMode(QtCore.Qt.MatchContains)
        self.cb_ward.setCompleter(comp)
        self.cb_ward.setCurrentIndex(0)
        self.cb_ward.setEditText(WARD_PLACEHOLDER)
        g.addWidget(self.cb_ward, r,3)
        g.addWidget(QtWidgets.QLabel("‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏Ñ‡∏™"), r,4)
        self.cb_case = NoWheelComboBox(); self.cb_case.addItems(["","Minor","Major"])
        self.cb_case.setMinimumWidth(120)
        g.addWidget(self.cb_case, r,5)
        r+=1
        g.addWidget(QtWidgets.QLabel("‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô"), r,0)
        self.cb_urgency = NoWheelComboBox(); self.cb_urgency.addItems(["Elective","Emergency"])
        self.cb_urgency.setMinimumWidth(180)
        g.addWidget(self.cb_urgency, r,1)
        self.lbl_period_info = QtWidgets.QLabel("")
        self.lbl_period_info.setProperty("hint", "1")
        g.addWidget(self.lbl_period_info, r,2,1,4)
        r+=1
        g.addWidget(QtWidgets.QLabel("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"), r,0)
        self.date=QtWidgets.QDateEdit(QtCore.QDate.currentDate()); self.date.setCalendarPopup(True); self.date.setDisplayFormat("dd/MM/yyyy"); self.date.setLocale(QLocale("en_US"))
        g.addWidget(self.date,r,1)
        g.addWidget(QtWidgets.QLabel("‡πÄ‡∏ß‡∏•‡∏≤"), r,2)
        self.time=QtWidgets.QTimeEdit(QtCore.QTime.currentTime()); self.time.setDisplayFormat("HH:mm"); self.time.setLocale(QLocale("en_US"))
        g.addWidget(self.time,r,3)
        g.addWidget(QtWidgets.QLabel("‡πÅ‡∏ú‡∏ô‡∏Å"), r,4)
        self.cb_dept=QtWidgets.QComboBox(); self.cb_dept.addItems(["‚Äî ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å ‚Äî"] + list(DEPT_DOCTORS.keys()))
        g.addWidget(self.cb_dept,r,5)
        r+=1
        self.lbl_warn = QtWidgets.QLabel(""); self.lbl_warn.setProperty("warn","1")
        g.addWidget(self.lbl_warn, r,0,1,6)
        r+=1
        self.row_doctor_label = QtWidgets.QLabel("‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ú‡∏π‡πâ‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î"); g.addWidget(self.row_doctor_label, r,0)
        self.cb_doctor=QtWidgets.QComboBox(); g.addWidget(self.cb_doctor,r,1,1,5)
        r+=1

        g.addWidget(section_header("Diagnosis"), r,0,1,6)
        r+=1
        self.diag_adder = SearchSelectAdder("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ICD-10 / ICD-10-TM...", suggestions=[])
        self.diag_adder.itemAdded.connect(lambda txt: _append_seed_item(SEED_DX_KEY, self._current_specialty_key, txt))
        g.addWidget(self.diag_adder, r,0,1,6)
        r+=1

        g.addWidget(section_header("Operation"), r,0,1,6)
        r+=1
        self.op_adder = SearchSelectAdder("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤/‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Operation...", suggestions=[])
        self.op_adder.itemsChanged.connect(self._on_operations_changed)
        self.op_adder.itemAdded.connect(lambda txt: _append_seed_item(SEED_OP_KEY, self._current_specialty_key, txt))
        g.addWidget(self.op_adder, r,0,1,6)
        r+=1

        g.addWidget(section_header("Scrub Nurse / ‡∏ó‡∏µ‡∏°‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•"), r,0,1,6)
        r+=1
        row_n = QtWidgets.QHBoxLayout(); row_n.setSpacing(8)

        def _hint(txt: str) -> QtWidgets.QLabel:
            lab = QtWidgets.QLabel(txt)
            lab.setProperty("hint", "1")
            return lab

        self.cb_assist1 = make_search_combo(SCRUB_NURSES)
        self.cb_assist2 = make_search_combo(SCRUB_NURSES)
        self.cb_scrub = make_search_combo(SCRUB_NURSES)
        self.cb_circulate = make_search_combo(SCRUB_NURSES)

        row_n.addWidget(_hint("Assist 1")); row_n.addWidget(self.cb_assist1, 1)
        row_n.addWidget(_hint("Assist 2")); row_n.addWidget(self.cb_assist2, 1)
        row_n.addWidget(_hint("Scrub")); row_n.addWidget(self.cb_scrub, 1)
        row_n.addWidget(_hint("Circulate")); row_n.addWidget(self.cb_circulate, 1)
        g.addLayout(row_n, r,0,1,6)
        r+=1

        g.addWidget(section_header("‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‚Äì‡∏à‡∏ö‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î (‡πÉ‡∏™‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏Å‡πá‡πÑ‡∏î‡πâ)"), r,0,1,6)
        r+=1
        row_t = QtWidgets.QHBoxLayout(); row_t.setSpacing(10)
        self.ck_time_start = QtWidgets.QCheckBox("‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°")
        self.time_start = QtWidgets.QTimeEdit(QtCore.QTime.currentTime())
        self.time_start.setDisplayFormat("HH:mm")
        self.time_start.setEnabled(False)
        self.ck_time_end = QtWidgets.QCheckBox("‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏ö")
        self.time_end = QtWidgets.QTimeEdit(QtCore.QTime.currentTime())
        self.time_end.setDisplayFormat("HH:mm")
        self.time_end.setEnabled(False)

        self.ck_time_start.toggled.connect(lambda ch: self.time_start.setEnabled(ch))
        self.ck_time_end.toggled.connect(lambda ch: self.time_end.setEnabled(ch))

        row_t.addWidget(self.ck_time_start)
        row_t.addWidget(self.time_start)
        row_t.addSpacing(16)
        row_t.addWidget(self.ck_time_end)
        row_t.addWidget(self.time_end)
        row_t.addStretch(1)
        g.addLayout(row_t, r,0,1,6)
        r+=1

        self.btn_add=QtWidgets.QPushButton("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°"); self.btn_add.setProperty("variant","primary")
        self.btn_cancel_edit=QtWidgets.QPushButton("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"); self.btn_cancel_edit.setProperty("variant","ghost"); self.btn_cancel_edit.hide()
        self.btn_clear=QtWidgets.QPushButton("üßπ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå"); self.btn_clear.setProperty("variant","ghost")
        rowb=QtWidgets.QHBoxLayout(); rowb.setSpacing(10); rowb.addWidget(self.btn_add); rowb.addWidget(self.btn_cancel_edit); rowb.addWidget(self.btn_clear); rowb.addStretch(1)
        g.addLayout(rowb, r,0,1,6)
        r+=1

        t1.addWidget(form); t1.addStretch(1)
        tab1_scroll = QtWidgets.QScrollArea()
        tab1_scroll.setWidgetResizable(True)
        tab1_scroll.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        tab1_scroll.setFrameShape(QtWidgets.QFrame.NoFrame)
        tab1_scroll.setWidget(tab1_inner)
        self.tabs.addTab(tab1_scroll, "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢")

        # TAB 2 ‚Äî Result Schedule
        tab2 = QtWidgets.QWidget(); t2 = QtWidgets.QVBoxLayout(tab2); t2.setSpacing(12)
        self.result_banner = InfoBanner("", "‡∏´‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏•‡∏≥‡∏†‡∏π")
        t2.addWidget(self.result_banner)
        self.card_result = Card("‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô", "‡∏´‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏•‡∏≥‡∏†‡∏π")
        self.card_result.title_lbl.hide()
        gr2 = self.card_result.grid
        self.tree2 = QtWidgets.QTreeWidget()
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏ó‡πá‡∏ö 1 ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏Å‡∏£‡∏≠‡∏•‡∏•‡πå‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
        self.tree2.setColumnCount(19)
        self.tree2.setHeaderLabels([
            "‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤","OR/‡πÄ‡∏ß‡∏•‡∏≤","HN","‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•","‡∏≠‡∏≤‡∏¢‡∏∏","Diagnosis","Operation","‡πÅ‡∏û‡∏ó‡∏¢‡πå",
            "Ward","‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏Ñ‡∏™","‡πÅ‡∏ú‡∏ô‡∏Å","Assist1","Assist2","Scrub","Circulate","‡πÄ‡∏£‡∏¥‡πà‡∏°","‡∏à‡∏ö","‡∏Ñ‡∏¥‡∏ß","‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏Ñ‡∏™"
        ])
        # ‡πÑ‡∏°‡πà‡∏û‡∏±‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô "..." ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏ï‡πá‡∏°‡πÇ‡∏î‡∏¢‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
        self.tree2.setWordWrap(False)
        self.tree2.setTextElideMode(QtCore.Qt.ElideNone)
        self.tree2.setUniformRowHeights(True)
        self.tree2.setAlternatingRowColors(True)
        self.tree2.setRootIsDecorated(False)
        self.tree2.setIndentation(12)
        self.tree2.setMouseTracking(True)
        # ‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏Å‡∏£‡∏≠‡∏•‡∏•‡πå‡∏ö‡∏≤‡∏£‡πå‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Å‡∏ß‡πâ‡∏≤‡∏á
        self.tree2.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.tree2.setHorizontalScrollMode(QtWidgets.QAbstractItemView.ScrollPerPixel)
        self.tree2.setStyleSheet("""
            /* ‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á */
            QTreeWidget{
                background:#ffffff;
                border:1px solid #dfe6f0;
                border-radius:12px;
                gridline-color:#e8edf5;
            }

            /* Header ‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏∏‡∏°‡∏ö‡∏ô‡πÇ‡∏Ñ‡πâ‡∏á‡∏à‡∏≤‡∏Å section ‡πÅ‡∏£‡∏Å/‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏≥‡∏á‡∏≤‡∏ô */
            QHeaderView{
                background:transparent;
                border:none;
                margin:0;
                padding:0;
            }

            /* ‡∏´‡∏±‡∏ß‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: ‡πÇ‡∏ó‡∏ô‡∏Ç‡∏≤‡∏ß‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô ‡∏Ç‡∏≠‡∏ö‡∏ä‡∏±‡∏î ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏≤ */
            QHeaderView::section{
                background:#f6f9ff;
                color:#0f172a;
                font-weight:900;
                letter-spacing:.2px;
                padding:12px 14px;
                border-top:1px solid #dfe6f0;
                border-bottom:1px solid #dfe6f0;
                border-right:1px solid #dfe6f0;
            }

            /* ‡∏°‡∏∏‡∏°‡∏ö‡∏ô‡∏ã‡πâ‡∏≤‡∏¢/‡∏Ç‡∏ß‡∏≤‡πÇ‡∏Ñ‡πâ‡∏á */
            QHeaderView::section:first{
                border-top-left-radius:12px;
                border-left:1px solid #dfe6f0;
            }
            QHeaderView::section:last{
                border-top-right-radius:12px;
                border-right:1px solid #dfe6f0;
            }

            /* Hover/Pressed ‡∏•‡∏î‡πÄ‡∏á‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ */
            QHeaderView::section:hover{
                background:#eef4ff;
            }
            QHeaderView::section:pressed{
                background:#e7efff;
            }

            /* ‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á */
            QTreeWidget::item{
                height:36px;
            }
            QTreeWidget::item:alternate{
                background:#fbfdff;
            }
            QTreeWidget::item:selected{
                background:rgba(37,99,235,0.12);
                border-radius:8px;
            }
            QTreeWidget::item:hover{
                background:rgba(2,132,199,0.06);
            }
        """)
        hdr=self.tree2.header(); hdr.setStretchLastSection(False)
        hdr.setDefaultAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        hdr.setFixedHeight(42)
        # ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏¢‡∏∑‡∏î‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏¥‡∏ô
        for i in (0,1,2,3,4,7,8,9,10,11,12,13,14,15,16,17,18):
            hdr.setSectionResizeMode(i, QtWidgets.QHeaderView.ResizeToContents)
        hdr.setSectionResizeMode(5, QtWidgets.QHeaderView.ResizeToContents)   # Diagnosis
        hdr.setSectionResizeMode(6, QtWidgets.QHeaderView.ResizeToContents)   # Operation
        self.tree2.setColumnWidth(17, 160)
        self.tree2.setColumnWidth(18, 140)
        self.tree2.setColumnHidden(0, True)
        hdr.setSectionResizeMode(0, QtWidgets.QHeaderView.Fixed)
        self.tree2.setColumnWidth(0, 0)
        self.tree2.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.tree2.customContextMenuRequested.connect(self._result_ctx_menu)
        gr2.addWidget(self.tree2,0,0,1,1)
        t2.addWidget(self.card_result, 1)
        self.tabs.addTab(tab2, "Result Schedule")

        # TAB 3 ‚Äî Monitor
        tab3 = QtWidgets.QWidget(); t3 = QtWidgets.QVBoxLayout(tab3); t3.setSpacing(12); t3.setContentsMargins(0,0,0,0)
        t3_banner = InfoBanner(
            title="Result (Monitor) ‚Äî ‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå",
            subtitle="",
            variant="violet",
            icon="üóìÔ∏è",
        )
        t3.addWidget(t3_banner)
        server_bar = QtWidgets.QFrame(); server_bar.setStyleSheet("QFrame{background:#fff;border:1px solid #e6eaf2;border-radius:14px;padding:8px;}"); add_shadow(server_bar)
        hb = QtWidgets.QHBoxLayout(server_bar); hb.setContentsMargins(8,8,8,8)
        self.ent_host = QtWidgets.QLineEdit("127.0.0.1"); self.ent_host.setMaximumWidth(180); self.ent_host.setEchoMode(QtWidgets.QLineEdit.Password)
        self.ent_port = QtWidgets.QLineEdit(str(DEFAULT_PORT)); self.ent_port.setMaximumWidth(90)
        self.ent_token = QtWidgets.QLineEdit(DEFAULT_TOKEN); self.ent_token.setEchoMode(QtWidgets.QLineEdit.Password)
        self.btn_health = QtWidgets.QPushButton("Health"); self.btn_health.setProperty("variant","ghost"); self.btn_health.clicked.connect(self._on_health)
        for w,lbl in [(self.ent_host,"Host"),(self.ent_port,"Port"),(self.ent_token,"Token")]:
            box=QtWidgets.QHBoxLayout(); lab=QtWidgets.QLabel(lbl); lab.setProperty("hint","1"); box.addWidget(lab); box.addWidget(w); hb.addLayout(box)
        hb.addWidget(self.btn_health); hb.addStretch(1)
        self.status_chip = QtWidgets.QLabel("‚óè Offline")
        self.status_chip.setStyleSheet("color:#ef4444;font-weight:800;padding:6px 10px;border:1px solid #e5e7eb;border-radius:999px;background:#fff;")
        hb.addWidget(self.status_chip)
        t3.addWidget(server_bar)

        mon = Card("Monitor Realtime (‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå)", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏î (‡∏î‡∏±‡∏ö‡πÄ‡∏ö‡∏¥‡∏•‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á HN ‡πÑ‡∏õ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)")
        gm=mon.grid
        self.table = QtWidgets.QTableWidget(0,4); self.table.setHorizontalHeaderLabels(["ID","Patient ID","‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞","‡πÄ‡∏ß‡∏•‡∏≤"])
        hdr2=self.table.horizontalHeader(); hdr2.setStretchLastSection(True)
        hdr2.setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeToContents)
        hdr2.setSectionResizeMode(1, QtWidgets.QHeaderView.Stretch)
        hdr2.setSectionResizeMode(2, QtWidgets.QHeaderView.ResizeToContents)
        hdr2.setSectionResizeMode(3, QtWidgets.QHeaderView.ResizeToContents)
        self.table.verticalHeader().setDefaultSectionSize(34)
        gm.addWidget(self.table,0,0,1,3)
        self.btn_refresh=QtWidgets.QPushButton("‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä"); self.btn_refresh.setProperty("variant","ghost")
        self.btn_export=QtWidgets.QPushButton("Export CSV"); self.btn_export.setProperty("variant","ghost")
        self.btn_export_deid=QtWidgets.QPushButton("Export De-Identified (CSV)"); self.btn_export_deid.setProperty("variant","ghost")
        gm.addWidget(self.btn_refresh,1,0)
        gm.addWidget(self.btn_export,1,1)
        gm.addWidget(self.btn_export_deid,1,2)
        gm.setColumnStretch(0,0); gm.setColumnStretch(1,0); gm.setColumnStretch(2,1)
        t3.addWidget(mon,1)
        self.tabs.addTab(tab3, "Monitor Realtime")

        # signals
        self.btn_refresh.clicked.connect(lambda: self._refresh(True))
        self.btn_export.clicked.connect(self._export_csv)
        self.btn_export_deid.clicked.connect(self._export_deid_csv)
        self.btn_manage_or.clicked.connect(self._manage_or)
        self.cb_dept.currentTextChanged.connect(self._on_dept_changed)
        self.btn_add.clicked.connect(self._on_add_or_update)
        self.btn_cancel_edit.clicked.connect(self._cancel_edit_mode)
        self.btn_clear.clicked.connect(self._clear_form)
        self.table.itemDoubleClicked.connect(self._on_monitor_double_click)
        self.tree2.itemDoubleClicked.connect(self._on_result_double_click)

        # default period info (auto-calculated)
        self._update_period_info()
        self.date.dateChanged.connect(lambda *_: self._update_period_info())
        self.time.timeChanged.connect(lambda *_: self._update_period_info())

        self._set_doctor_visibility(False)
        self._on_dept_changed(self.cb_dept.currentText())
        self._render_tree2()

    # ---------- settings / timers ----------
    def _load_settings(self):
        self.cfg = QSettings(ORG_NAME, APP_SETTINGS)
        self.tabs.setCurrentIndex(0)
    def _save_settings(self): pass
    def closeEvent(self, e):
        try:
            if self.ws: self.ws.close()
        except Exception: pass
        super().closeEvent(e)

    def _start_timers(self):
        self._pull = QtCore.QTimer(self); self._pull.timeout.connect(lambda: self._refresh(True)); self._pull.start(3000)
        self._seq_timer = QtCore.QTimer(self); self._seq_timer.timeout.connect(self._check_seq); self._seq_timer.start(1000)
        QtCore.QTimer.singleShot(200, lambda: self._refresh(True))
        QtCore.QTimer.singleShot(600, self._start_ws)
        self._returning_cron = QtCore.QTimer(self)
        self._returning_cron.timeout.connect(self._tick_returning_cron)
        self._returning_cron.start(30_000)

    def _tick_returning_cron(self):
        changed = False
        now = datetime.now()
        for entry in self.sched.entries:
            if entry.state == "returning_to_ward" and entry.returning_started_at:
                t0 = _parse_iso(entry.returning_started_at)
                if not t0:
                    continue
                if (now - t0) >= timedelta(minutes=3):
                    if _is_postop_complete_entry(entry):
                        entry.postop_completed = True
                        entry.state = "returned_to_ward"
                    else:
                        entry.postop_completed = False
                        entry.state = "postop_pending"
                    entry.returned_to_ward_at = _now_iso()
                    entry.version = int(entry.version or 1) + 1
                    changed = True
        if changed:
            self.sched._save()
            self._render_tree2()

    # ---------- PDPA first-run gate ----------
    def _pdpa_gate(self):
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° salt ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö export ‡πÅ‡∏ö‡∏ö de-id)
        _get_or_create_secret(SECRET_SALT_KEY, 32)
        # ‡πÅ‡∏™‡∏î‡∏á PDPA ‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
        if not self.cfg.value(PDPA_ACK_KEY, False, type=bool):
            dlg = PDPANoticeDialog(self)
            dlg.exec()
            self.cfg.setValue(PDPA_ACK_KEY, True); self.cfg.sync()

    # ---------- helpers ----------
    def _client(self):
        try:
            return ClientHTTP(self.ent_host.text().strip() or "127.0.0.1",
                              int(self.ent_port.text().strip() or DEFAULT_PORT),
                              self.ent_token.text().strip() or DEFAULT_TOKEN)
        except Exception:
            return ClientHTTP()
    def _on_health(self):
        try: self._client().health(); self._chip(True)
        except Exception: self._chip(False)
    def _chip(self, ok:bool):
        if ok:
            self.status_chip.setText("‚óè Online"); self.status_chip.setStyleSheet("color:#10b981;font-weight:800;padding:6px 10px;border:1px solid #e5e7eb;border-radius:999px;background:#fff;")
        else:
            self.status_chip.setText("‚óè Offline"); self.status_chip.setStyleSheet("color:#ef4444;font-weight:800;padding:6px 10px;border:1px solid #e5e7eb;border-radius:999px;background:#fff;")
    def _refresh(self, prefer_server=True):
        self.btn_refresh.setEnabled(False)
        try:
            data=self._client().list_items()
            rows=extract_rows(data)
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï historical monitor seen ‡∏Å‡πà‡∏≠‡∏ô render (‡πÄ‡∏Å‡πá‡∏ö HN ‡∏ó‡∏µ‡πà monitor ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏°‡∏≤)
            for r in rows:
                hn = str(r.get("hn_full") or "").strip()
                if not hn:
                    rid = str(r.get("id") or "")
                    if rid.isdigit() and len(rid)==9:
                        hn = rid
                if hn:
                    self._historical_monitor_seen.add(hn)
            self._rebuild_table(rows); self._chip(True)
        except Exception:
            self._chip(False); self._rebuild_table([])
        finally:
            self.btn_refresh.setEnabled(True)

    def _rebuild_table(self, rows):
        self.rows_cache=rows; self.table.setRowCount(0)
        if not rows:
            self.table.setRowCount(1); self.table.setSpan(0,0,1,4)
            empty=QtWidgets.QTableWidgetItem("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏Å‡∏î‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä)")
            empty.setFlags(QtCore.Qt.ItemIsEnabled); empty.setForeground(QtGui.QBrush(QtGui.QColor("#64748b")))
            self.table.setItem(0,0,empty)
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Result tree ‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Å‡∏£‡∏ì‡∏µ HN ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
            self._render_tree2()
            return
        for r in rows:
            i=self.table.rowCount(); self.table.insertRow(i)
            self.table.setItem(i,0,QtWidgets.QTableWidgetItem(str(r.get("id",""))))
            self.table.setItem(i,1,QtWidgets.QTableWidgetItem(str(r.get("patient_id",""))))
            status = str(r.get("status",""))
            col=STATUS_COLORS.get(status, "#64748b")
            chip = StatusChipWidget(status or "-", col, pulse=(status in PULSE_STATUS))
            self.table.setCellWidget(i,2, chip)
            ts=_parse_iso(r.get("timestamp")); txt=""
            if ts: txt=_fmt_td(datetime.now()-ts)
            self.table.setItem(i,3,QtWidgets.QTableWidgetItem(txt))
        # ‡πÉ‡∏´‡πâ Result tree ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢ ‡πÄ‡∏°‡∏∑‡πà‡∏≠ monitor ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
        self._render_tree2()

    def _ws_url(self):
        return f"ws://{self.ent_host.text().strip() or '127.0.0.1'}:{int(self.ent_port.text().strip() or DEFAULT_PORT)}{API_WS}?token={self.ent_token.text().strip() or DEFAULT_TOKEN}"
    def _start_ws(self):
        try:
            self.ws=QWebSocket()
            self.ws.errorOccurred.connect(lambda _e:self._ws_disc())
            self.ws.connected.connect(lambda:(self._chip(True), self._pull.stop()))
            self.ws.disconnected.connect(self._ws_disc)
            self.ws.textMessageReceived.connect(self._on_ws_msg)
            self.ws.open(QUrl(self._ws_url()))
        except Exception:
            self._ws_disc()
    def _ws_disc(self):
        if self._pull.isActive()==False: self._pull.start(3000)
    def _on_ws_msg(self, msg):
        try:
            rows=extract_rows(json.loads(msg))
            # update historical seen on live ws msgs too
            for r in rows:
                hn = str(r.get("hn_full") or "").strip()
                if not hn:
                    rid = str(r.get("id") or "")
                    if rid.isdigit() and len(rid)==9:
                        hn = rid
                if hn:
                    self._historical_monitor_seen.add(hn)
            self._rebuild_table(rows)
        except Exception: pass

    # ---------- schedule ----------
    def _refresh_or_cb(self, cb:QtWidgets.QComboBox):
        cb.clear(); cb.addItems(self.sched.or_rooms)
    def _manage_or(self):
        dlg=QtWidgets.QDialog(self); dlg.setWindowTitle("‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ OR"); v=QtWidgets.QVBoxLayout(dlg)
        lst=QtWidgets.QListWidget(); lst.addItems(self.sched.or_rooms); v.addWidget(lst)
        h=QtWidgets.QHBoxLayout(); ent=QtWidgets.QLineEdit(); ent.setPlaceholderText("‡πÄ‡∏ä‡πà‡∏ô OR9"); btn_add=QtWidgets.QPushButton("‡πÄ‡∏û‡∏¥‡πà‡∏°"); btn_del=QtWidgets.QPushButton("‡∏•‡∏ö"); h.addWidget(ent,1); h.addWidget(btn_add); h.addWidget(btn_del); v.addLayout(h)
        ok=QtWidgets.QPushButton("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"); ok.setProperty("variant","primary"); v.addWidget(ok)
        btn_add.clicked.connect(lambda: (ent.text().strip().upper() and lst.addItem(ent.text().strip().upper()), ent.setText("")))
        btn_del.clicked.connect(lambda: [lst.takeItem(lst.row(x)) for x in lst.selectedItems()])
        def save():
            rooms=[lst.item(i).text() for i in range(lst.count())]; self.sched.set_or_rooms(rooms); self._refresh_or_cb(self.cb_or); dlg.accept()
        ok.clicked.connect(save); dlg.exec()

    def _update_period_info(self):
        qd = self.date.date()
        qtime = self.time.time()
        dt = datetime(qd.year(), qd.month(), qd.day(), qtime.hour(), qtime.minute())
        auto = _now_period(dt)
        if hasattr(self, "lbl_period_info"):
            self.lbl_period_info.setText(
                f"‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: {_period_label(auto)} (‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á {dt:%d/%m/%Y %H:%M})"
            )
        return auto

    def _on_dept_changed(self, dept_label:str):
        if dept_label and not dept_label.startswith("‚Äî"):
            self._set_doctor_visibility(True); self.cb_doctor.clear(); self.cb_doctor.addItems(DEPT_DOCTORS.get(dept_label, []))
        else:
            self._set_doctor_visibility(False); self.cb_doctor.clear()
        key = _dept_key(dept_label or "")
        self._current_specialty_key = key
        primary_ops = operation_suggestions(key)
        fallback_ops = [op for op in ALL_OPERATIONS if op not in primary_ops]
        custom_ops = _get_seed_list(SEED_OP_KEY, key)
        self.op_adder.set_suggestions(custom_ops + primary_ops + fallback_ops)
        self._refresh_diag_suggestions()

    def _refresh_diag_suggestions(self):
        if not hasattr(self, "op_adder"):
            return
        ops = self.op_adder.items() if hasattr(self.op_adder, "items") else []
        suggestions = diagnosis_suggestions(self._current_specialty_key, ops)
        custom_dx = _get_seed_list(SEED_DX_KEY, self._current_specialty_key)
        self.diag_adder.set_suggestions(custom_dx + suggestions)

    def _on_operations_changed(self, _items: List[str]):
        self._refresh_diag_suggestions()

    def _set_doctor_visibility(self, visible: bool):
        self.row_doctor_label.setVisible(visible); self.cb_doctor.setVisible(visible)

    def _collect(self):
        qd=self.date.date()
        dt = datetime(qd.year(), qd.month(), qd.day(), self.time.time().hour(), self.time.time().minute())
        auto_period = _now_period(dt)
        ward_text = self.cb_ward.currentText().strip()
        if ward_text == WARD_PLACEHOLDER:
            ward_text = ""
        return ScheduleEntry(
            or_room=self.cb_or.currentText().strip(), dt=dt.date(), time_str=self.time.time().toString("HH:mm"),
            hn=self.ent_hn.text().strip(), name=self.ent_name.text().strip(), age=self.ent_age.text().strip() or "0",
            dept=(self.cb_dept.currentText().strip() if not self.cb_dept.currentText().startswith("‚Äî") else ""),
            doctor=self.cb_doctor.currentText().strip() if self.cb_doctor.isVisible() else "",
            diags=self.diag_adder.items(), ops=self.op_adder.items(),
            ward=ward_text,
            case_size=self.cb_case.currentText().strip(),
            queue=0,
            period=auto_period,
            urgency=self.cb_urgency.currentText().strip() or "Elective",
            assist1=self.cb_assist1.currentText().strip(),
            assist2=self.cb_assist2.currentText().strip(),
            scrub=self.cb_scrub.currentText().strip(),
            circulate=self.cb_circulate.currentText().strip(),
            time_start=(self.time_start.time().toString("HH:mm") if self.ck_time_start.isChecked() else ""),
            time_end=(self.time_end.time().toString("HH:mm") if self.ck_time_end.isChecked() else ""),
        )

    def _clear_form(self):
        self.cb_or.setCurrentIndex(0)
        self.ent_name.clear(); self.ent_age.clear(); self.ent_hn.clear()
        self.cb_dept.setCurrentIndex(0); self.cb_doctor.clear(); self._set_doctor_visibility(False)
        self.diag_adder.clear(); self.op_adder.clear()
        self.cb_ward.setCurrentIndex(0); self.cb_ward.setEditText(WARD_PLACEHOLDER)
        if hasattr(self, "cb_case"):
            self.cb_case.setCurrentIndex(0)
        if hasattr(self, "cb_urgency"):
            idx = self.cb_urgency.findText("Elective")
            self.cb_urgency.setCurrentIndex(idx if idx >= 0 else 0)
        for cb in (self.cb_assist1, self.cb_assist2, self.cb_scrub, self.cb_circulate):
            cb.setCurrentIndex(0)
            cb.setEditText("")
        self.ck_time_start.setChecked(False); self.time_start.setEnabled(False); self.time_start.setTime(QtCore.QTime.currentTime())
        self.ck_time_end.setChecked(False); self.time_end.setEnabled(False); self.time_end.setTime(QtCore.QTime.currentTime())
        self.date.setDate(QtCore.QDate.currentDate())
        self.time.setTime(QtCore.QTime.currentTime())
        self._update_period_info()
        self._on_dept_changed(self.cb_dept.currentText())
        self._set_add_mode()

    # ---------- ADD / UPDATE ----------
    def _set_edit_mode(self, idx:int):
        self._edit_idx = idx
        self.btn_add.setText("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
        self.btn_cancel_edit.show()
        self.toast.show_toast("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")

    def _set_add_mode(self):
        self._edit_idx = None
        self.btn_add.setText("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°")
        self.btn_cancel_edit.hide()

    def _cancel_edit_mode(self):
        self._set_add_mode()
        self.toast.show_toast("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")

    def _load_form_from_entry(self, e:ScheduleEntry):
        idx = self.cb_or.findText(e.or_room)
        if idx >= 0: self.cb_or.setCurrentIndex(idx)
        self.ent_name.setText(e.name or "")
        self.ent_age.setText(str(e.age or 0))
        self.ent_hn.setText(e.hn or "")
        if hasattr(self, "cb_urgency"):
            idx_u = self.cb_urgency.findText(e.urgency or "Elective")
            self.cb_urgency.setCurrentIndex(idx_u if idx_u >= 0 else 0)
        try:
            d = QtCore.QDate(e.date.year, e.date.month, e.date.day)
            self.date.setDate(d)
        except Exception: pass
        try:
            hh, mm = (e.time or "00:00").split(":")
            self.time.setTime(QtCore.QTime(int(hh), int(mm)))
        except Exception: pass
        self._update_period_info()
        if e.dept:
            for i in range(self.cb_dept.count()):
                if self.cb_dept.itemText(i).startswith(e.dept) or self.cb_dept.itemText(i)==e.dept:
                    self.cb_dept.setCurrentIndex(i); break
        if e.doctor and self.cb_doctor.isVisible():
            j = self.cb_doctor.findText(e.doctor)
            if j >= 0: self.cb_doctor.setCurrentIndex(j)
        self.diag_adder.clear(); [self.diag_adder.list.addItem(x) for x in (e.diags or [])]
        self.op_adder.clear();   [self.op_adder.list.addItem(x)   for x in (e.ops   or [])]
        # Ward
        j = self.cb_ward.findText(e.ward) if e.ward else -1
        if j >= 0:
            self.cb_ward.setCurrentIndex(j)
        else:
            if e.ward:
                self.cb_ward.setEditText(e.ward)
            else:
                self.cb_ward.setCurrentIndex(0)
                self.cb_ward.setEditText(WARD_PLACEHOLDER)

        # Case size
        if hasattr(self, "cb_case"):
            k = self.cb_case.findText(e.case_size) if e.case_size else -1
            if k >= 0:
                self.cb_case.setCurrentIndex(k)
            else:
                self.cb_case.setCurrentIndex(0)

        # Nurse roles
        for combo, value in (
            (self.cb_assist1, e.assist1),
            (self.cb_assist2, e.assist2),
            (self.cb_scrub, e.scrub),
            (self.cb_circulate, e.circulate),
        ):
            val = value or ""
            idx_val = combo.findText(val) if val else 0
            if val and idx_val >= 0:
                combo.setCurrentIndex(idx_val)
            else:
                combo.setCurrentIndex(0)
            combo.setEditText(val)

        # Start/End time (optional)
        if e.time_start:
            self.ck_time_start.setChecked(True)
            try:
                hh, mm = e.time_start.split(":")
                self.time_start.setTime(QtCore.QTime(int(hh), int(mm)))
            except Exception:
                pass
        else:
            self.ck_time_start.setChecked(False)
            self.time_start.setEnabled(False)
            self.time_start.setTime(QtCore.QTime.currentTime())

        if e.time_end:
            self.ck_time_end.setChecked(True)
            try:
                hh, mm = e.time_end.split(":")
                self.time_end.setTime(QtCore.QTime(int(hh), int(mm)))
            except Exception:
                pass
        else:
            self.ck_time_end.setChecked(False)
            self.time_end.setEnabled(False)
            self.time_end.setTime(QtCore.QTime.currentTime())

    def _on_add_or_update(self):
        e = self._collect()
        errs=[]
        if not e.or_room: errs.append("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å OR")
        if not e.name: errs.append("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•")
        if not e.hn: errs.append("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å HN")
        if e.hn and not e.hn.isdigit(): errs.append("HN ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        if errs:
            self.lbl_warn.setText(" ‚Ä¢ ".join(errs))
            try: QtWidgets.QApplication.beep()
            except Exception: pass
            return
        else:
            self.lbl_warn.setText("")

        # ‡∏à‡∏≥ uid ‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        self._last_focus_uid = e.uid()

        if self._edit_idx is None:
            self.sched.add(e)
            try: self.db_logger.append_entry(e)
            except Exception: pass
            self._notify("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß", f"OR {e.or_room} ‚Ä¢ {e.time} ‚Ä¢ HN {e.hn}")
            self.toast.show_toast("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            # ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ historical_monitor_seen ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‚Äî ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ monitor ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô HN ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°
        else:
            if 0 <= self._edit_idx < len(self.sched.entries):
                old_entry = self.sched.entries[self._edit_idx]
                e.case_uid = old_entry.case_uid
                e.version = int(old_entry.version or 1) + 1
                e.state = old_entry.state
                e.returning_started_at = old_entry.returning_started_at
                e.returned_to_ward_at = old_entry.returned_to_ward_at
                e.postop_completed = old_entry.postop_completed
            self.sched.update(self._edit_idx, e)
            self._notify("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß", f"OR {e.or_room} ‚Ä¢ {e.time} ‚Ä¢ HN {e.hn}")
            self.toast.show_toast("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            self._set_add_mode()

        self._set_result_title()
        self._render_tree2()

        # ‡πÄ‡∏î‡πâ‡∏á‡πÑ‡∏õ‡πÅ‡∏ó‡πá‡∏ö Result ‡πÅ‡∏•‡∏∞‡πÇ‡∏ü‡∏Å‡∏±‡∏™/‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
        self.tabs.setCurrentIndex(1)
        QtCore.QTimer.singleShot(120, lambda: self._focus_uid(self._last_focus_uid))

        self._clear_form()

    # ---------- Result tree (with off-hours filtering + strike-through) ----------
    def _monitor_hn_set(self) -> set:
        """‡∏î‡∏∂‡∏á‡∏ä‡∏∏‡∏î HN ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Monitor (rows_cache ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)"""
        s=set()
        for r in (self.rows_cache or []):
            hn = str(r.get("hn_full") or "").strip()
            if not hn:
                rid = str(r.get("id") or "")
                if rid.isdigit() and len(rid)==9:
                    hn = rid
            if hn:
                s.add(hn)
        return s

    def _is_entry_completed(self, e: ScheduleEntry) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏Ñ‡∏™"""
        return _is_postop_complete_entry(e)

    def _render_tree2(self):
        hbar = self.tree2.horizontalScrollBar()
        old_hval = hbar.value()
        self.tree2.setUpdatesEnabled(False)

        try:
            self.tree2.clear()

            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å entries ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤
            now_code = _now_period(datetime.now())  # "in" / "off"
            in_monitor = self._monitor_hn_set()

            def should_show(entry: ScheduleEntry) -> bool:
                if now_code == "in":
                    return True  # ‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£ ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                # ‡∏ô‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£: ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ off-period ‡πÅ‡∏•‡∏∞ in-period ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à (HN ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô monitor)
                return (entry.period == "off") or (entry.period == "in" and entry.hn in in_monitor)

            entries_to_show: List[Tuple[int, ScheduleEntry]] = [
                (idx, entry) for idx, entry in enumerate(self.sched.entries) if should_show(entry)
            ]

            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏±‡∏ß‡∏Å‡∏≤‡∏£‡πå‡∏î/‡πÅ‡∏ö‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå
            self._set_result_title()

            # ‡πÄ‡∏Ñ‡∏™‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏∏‡πà‡∏°‡∏ô‡∏ß‡∏•
            if not entries_to_show:
                return

            # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° OR
            groups: Dict[str, List[Tuple[int, ScheduleEntry]]] = {}
            for idx, entry in entries_to_show:
                groups.setdefault(entry.or_room or "-", []).append((idx, entry))

            order=self.sched.or_rooms

            def time_key(se:Tuple[int,ScheduleEntry]):
                entry = se[1]
                return entry.time or "99:99"

            status_map_color = {
                "returning_to_ward": "#ede9fe",
                "postop_pending": "#fff7ed",
                "returned_to_ward": "#ecfdf5",
            }

            for orr in sorted(groups.keys(), key=lambda x: (order.index(x) if x in order else 999, x)):
                parent=QtWidgets.QTreeWidgetItem(["", orr])
                parent.setFirstColumnSpanned(True)
                bg_brush = QtGui.QBrush(QtGui.QColor("#f6f9ff"))
                parent.setBackground(0, bg_brush)
                parent.setBackground(1, bg_brush)
                pfont = parent.font(1)
                pfont.setBold(True)
                parent.setFont(1, pfont)
                for c in range(self.tree2.columnCount()):
                    parent.setData(c, QtCore.Qt.UserRole + 99, "grp")
                self.tree2.addTopLevelItem(parent)

                # ‡∏Ñ‡∏¥‡∏ß 1‚Äì9 ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß), ‡∏Ñ‡∏¥‡∏ß 0 ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
                rows_sorted = sorted(
                    groups[orr],
                    key=lambda se: (0, int(se[1].queue)) if int(se[1].queue or 0) > 0 else (1, time_key(se))
                )

                for idx, entry in rows_sorted:
                    diag_txt = " with ".join(entry.diags) if entry.diags else "-"
                    op_txt   = " with ".join(entry.ops)   if entry.ops   else "-"
                    row=QtWidgets.QTreeWidgetItem([
                        _period_label(entry.period),                # 0
                        entry.time or "-",                          # 1
                        entry.hn,                                   # 2
                        entry.name or "-",                          # 3
                        str(entry.age or 0),                        # 4
                        diag_txt,                                   # 5
                        op_txt,                                     # 6
                        entry.doctor or "-",                        # 7
                        entry.ward or "-",                          # 8
                        entry.case_size or "-",                     # 9
                        entry.dept or "-",                          # 10
                        entry.assist1 or "-",                       # 11
                        entry.assist2 or "-",                       # 12
                        entry.scrub or "-",                         # 13
                        entry.circulate or "-",                     # 14
                        entry.time_start or "-",                    # 15
                        entry.time_end or "-",                      # 16
                        "",                                        # 17 (‡∏Ñ‡∏¥‡∏ß: widget)
                        entry.urgency or "Elective",                # 18
                    ])
                    row.setData(0, QtCore.Qt.UserRole, entry.uid())
                    row.setData(0, QtCore.Qt.UserRole+1, idx)
                    parent.addChild(row)

                    qs = QueueSelectWidget(int(entry.queue or 0))
                    uid = entry.uid()
                    qs.changed.connect(lambda new_q, u=uid: self._apply_queue_select(u, int(new_q)))
                    self.tree2.setItemWidget(row, 17, qs)

                    st = entry.state or "scheduled"
                    tip_lines = [f"State: {st}"]
                    if entry.returning_started_at:
                        tip_lines.append(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏∂‡∏Å‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà: {entry.returning_started_at}")
                    if entry.returned_to_ward_at:
                        tip_lines.append(f"‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏∂‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠: {entry.returned_to_ward_at}")
                    if entry.postop_completed:
                        tip_lines.append("(‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‚úì)")
                    row.setToolTip(3, "\n".join(tip_lines))

                    if st in status_map_color:
                        brush = QtGui.QBrush(QtGui.QColor(status_map_color[st]))
                        for col_idx in range(self.tree2.columnCount()):
                            row.setBackground(col_idx, brush)

                    # ‡∏Ç‡∏µ‡∏î‡∏Ü‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠ "‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß"
                    # ‡∏õ‡∏£‡∏±‡∏ö: ‡∏à‡∏∞‡∏Ç‡∏µ‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ HN ‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏ô Monitor ‡πÅ‡∏ï‡πà‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Monitor ‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ
                    if (
                        entry.hn
                        and (entry.hn not in in_monitor)
                        and (entry.hn in self._historical_monitor_seen)
                        and self._is_entry_completed(entry)
                    ):
                        _apply_done_style(row, row.columnCount())

            self.tree2.expandAll()
        finally:
            self.tree2.setUpdatesEnabled(True)
            QtCore.QTimer.singleShot(0, lambda: hbar.setValue(min(old_hval, hbar.maximum())))

    def _apply_queue_select(self, uid: str, new_q: int):
        target=None; target_idx=None
        for i, entry in enumerate(self.sched.entries):
            if entry.uid()==uid:
                target=entry; target_idx=i; break
        if not target: return
        new_q = max(0, min(9, int(new_q)))
        if new_q == target.queue: return
        target.queue = int(new_q)
        self.sched._save()
        try: QtWidgets.QApplication.beep()
        except Exception: pass
        self._notify("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"OR {target.or_room} ‚Ä¢ HN {target.hn} ‚Üí ‡∏Ñ‡∏¥‡∏ß {new_q or '‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤'}")
        self._set_result_title()
        self._render_tree2()
        self._flash_row_by_uid(uid)

    def _find_item_by_uid(self, uid:str):
        root = self.tree2.invisibleRootItem()
        for i in range(root.childCount()):
            parent = root.child(i)
            for j in range(parent.childCount()):
                ch = parent.child(j)
                if ch.data(0, QtCore.Qt.UserRole)==uid:
                    return ch
        return None

    def _flash_row_by_uid(self, uid:str):
        it = self._find_item_by_uid(uid)
        if not it: return
        rect = self.tree2.visualItemRect(it)
        overlay = QtWidgets.QFrame(self.tree2.viewport())
        overlay.setGeometry(0, rect.y(), self.tree2.viewport().width(), rect.height())
        overlay.setStyleSheet("QFrame{background:rgba(250,204,21,0.35);border-radius:4px;}")
        overlay.raise_(); overlay.show()
        anim = QtCore.QPropertyAnimation(overlay, b"windowOpacity", self)
        anim.setDuration(900); anim.setStartValue(1.0); anim.setKeyValueAt(0.5, 0.0); anim.setEndValue(1.0); anim.setLoopCount(2)
        anim.finished.connect(overlay.deleteLater)
        anim.start(QtCore.QAbstractAnimation.DeleteWhenStopped)

    def _focus_uid(self, uid:str):
        if not uid: return
        it = self._find_item_by_uid(uid)
        if not it: return
        hbar = self.tree2.horizontalScrollBar()
        old_hval = hbar.value()

        rect = self.tree2.visualItemRect(it)
        if not rect.isValid():
            index = self.tree2.indexFromItem(it)
            if index.isValid():
                self.tree2.scrollTo(index, QtWidgets.QAbstractItemView.PositionAtCenter)
                rect = self.tree2.visualItemRect(it)

        if rect.isValid():
            vbar = self.tree2.verticalScrollBar()
            target = rect.y() + vbar.value() - (self.tree2.viewport().height() // 2)
            vbar.setValue(max(0, min(target, vbar.maximum())))

        self.tree2.setCurrentItem(it)
        self._flash_row_by_uid(uid)
        QtCore.QTimer.singleShot(0, lambda: hbar.setValue(min(old_hval, hbar.maximum())))

    # ---------- Result context menu / Double-click ----------
    def _result_ctx_menu(self, pos: QtCore.QPoint):
        it = self.tree2.itemAt(pos)
        if not it: return
        idx = it.data(0, QtCore.Qt.UserRole+1)
        if idx is None: return
        menu = QtWidgets.QMenu(self)
        a_edit = menu.addAction("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        a_del  = menu.addAction("‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        act = menu.exec(self.tree2.viewport().mapToGlobal(pos))
        if act == a_edit:
            self._on_result_double_click(it, 0)
        elif act == a_del:
            self._delete_entry_idx(int(idx))

    def _delete_entry_idx(self, idx:int):
        if 0 <= idx < len(self.sched.entries):
            entry = self.sched.entries[idx]
            ok = QtWidgets.QMessageBox.question(self, "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö", f"‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ HN {entry.hn} ({entry.name}) ?")
            if ok == QtWidgets.QMessageBox.StandardButton.Yes:
                self.sched.delete(idx)
                self._render_tree2()
                self.toast.show_toast("‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß")

    def _on_monitor_double_click(self, item:QtWidgets.QTableWidgetItem):
        row = item.row()
        hn = self.table.item(row, 0).text().strip() if self.table.item(row,0) else ""
        if not hn:
            self.toast.show_toast("‡πÑ‡∏°‡πà‡∏û‡∏ö HN ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß‡∏ô‡∏µ‡πâ"); return
        self._route_to_identify(hn)

    def _on_result_double_click(self, item:QtWidgets.QTreeWidgetItem, col:int):
        idx = item.data(0, QtCore.Qt.UserRole+1)
        if idx is None: return
        if 0 <= int(idx) < len(self.sched.entries):
            entry = self.sched.entries[int(idx)]
            self._load_form_from_entry(entry)
            self._set_edit_mode(int(idx))
            self.tabs.setCurrentIndex(0)  # ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ü‡∏≠‡∏£‡πå‡∏°

    # ---------- Identify routing ----------
    def _find_entry_index_by_hn(self, hn:str)->Optional[int]:
        for i, entry in enumerate(self.sched.entries):
            if str(entry.hn).strip()==str(hn).strip():
                return i
        return None

    def _route_to_identify(self, hn:str):
        QtWidgets.QApplication.clipboard().setText(hn)
        idx = self._find_entry_index_by_hn(hn)
        if idx is not None:
            entry = self.sched.entries[idx]
            self._load_form_from_entry(entry)
            self._set_edit_mode(idx)
            self.tabs.setCurrentIndex(0)
            self.toast.show_toast(f"HN {hn}: ‡∏û‡∏ö‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‚Üí ‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
        else:
            self._clear_form()
            self.ent_hn.setText(hn)
            self._set_add_mode()
            self.tabs.setCurrentIndex(0)
            self.toast.show_toast(f"HN {hn}: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà")

    def apply_external_update(self, uid: str, patch: dict) -> bool:
        """‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å client ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏¥‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡∏•‡∏±‡∏á‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î"""
        accepted_keys = {
            "assist1",
            "assist2",
            "scrub",
            "circulate",
            "time_start",
            "time_end",
            "ward",
            "doctor",
        }
        accepted_keys |= {
            "state",
            "returning_started_at",
            "returned_to_ward_at",
            "postop_completed",
            "version",
        }

        intent = str(patch.get("_intent") or "").strip().lower()

        for entry in self.sched.entries:
            if entry.uid() == uid:
                if intent == "mark_returning":
                    if not entry.time_end:
                        self.toast.show_toast("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤ '‡∏à‡∏ö‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î' ‚Äî ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏∂‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
                        return False
                    entry.state = "returning_to_ward"
                    entry.returning_started_at = _now_iso()
                    entry.postop_completed = False
                    entry.returned_to_ward_at = ""
                    entry.version = int(entry.version or 1) + 1
                    self.sched._save()
                    self._render_tree2()
                    self._flash_row_by_uid(uid)
                    self.toast.show_toast("‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏∂‡∏Å' ‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö 3 ‡∏ô‡∏≤‡∏ó‡∏µ)")
                    return True

                string_fields = {
                    "assist1",
                    "assist2",
                    "scrub",
                    "circulate",
                    "time_start",
                    "time_end",
                    "ward",
                    "doctor",
                    "state",
                    "returning_started_at",
                    "returned_to_ward_at",
                }

                for key in accepted_keys:
                    if key not in patch:
                        continue
                    value = patch.get(key)
                    if key == "version":
                        # version ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡πâ‡∏≤‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
                        continue
                    if key == "postop_completed":
                        entry.postop_completed = bool(value)
                        continue
                    if key in string_fields:
                        setattr(entry, key, str(value or ""))
                        continue
                    setattr(entry, key, value)

                entry.version = int(entry.version or 1) + 1
                if entry.state == "returning_to_ward" and not entry.returning_started_at:
                    entry.returning_started_at = _now_iso()
                self.sched._save()
                self._render_tree2()
                self._flash_row_by_uid(uid)
                self.toast.show_toast("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Client ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                return True
        return False

    # ---------- export ----------
    def _export_csv(self):
        path,_=QtWidgets.QFileDialog.getSaveFileName(self,"Export CSV","monitor.csv","CSV (*.csv)")
        if not path: return
        try:
            with open(path,"w",newline="",encoding="utf-8-sig") as f:
                w=csv.writer(f); w.writerow(["ID","Patient ID","Status","Timestamp","ETA(min)"])
                for r in self.rows_cache: w.writerow([r.get("id",""), r.get("patient_id",""), r.get("status",""), r.get("timestamp",""), r.get("eta_minutes","")])
            QtWidgets.QMessageBox.information(self,"‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß",path)
        except Exception as e:
            QtWidgets.QMessageBox.critical(self,"‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",str(e))

    def _export_deid_csv(self):
        """
        ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡∏ï‡∏ô (de-identified)
        ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: self.sched.entries (‡∏ï‡∏≤‡∏£‡∏≤‡∏á Result Schedule ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á)
        ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: hn_hash, dept, or, queue, period, scheduled date/time, time_start, time_end, diags, ops, ward
        """
        path,_=QtWidgets.QFileDialog.getSaveFileName(self,"Export De-Identified CSV","cases_deid.csv","CSV (*.csv)")
        if not path: return
        try:
            rows=[]
            for e in self.sched.entries:
                rows.append({
                    "hn_hash": hn_hash(e.hn or ""),
                    "dept": e.dept or "",
                    "or": e.or_room or "",
                    "queue": int(e.queue or 0),
                    "period": e.period or "",
                    "scheduled_date": str(e.date or ""),
                    "scheduled_time": e.time or "",
                    "time_start": e.time_start or "",
                    "time_end": e.time_end or "",
                    "diag": " | ".join(e.diags or []),
                    "op": " | ".join(e.ops or []),
                    "ward": e.ward or "",
                    "case_size": e.case_size or "",
                    "urgency": e.urgency or "",
                    "doctor": e.doctor or "",
                    # ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å HN/‡∏ä‡∏∑‡πà‡∏≠
                })
            with open(path,"w",newline="",encoding="utf-8-sig") as f:
                cols=["hn_hash","dept","or","queue","period","scheduled_date","scheduled_time","time_start","time_end","diag","op","ward","case_size","urgency","doctor"]
                w=csv.DictWriter(f, fieldnames=cols)
                w.writeheader(); w.writerows(rows)
            QtWidgets.QMessageBox.information(self,"‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß",path)
        except Exception as e:
            QtWidgets.QMessageBox.critical(self,"‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",str(e))

    # ---------- notify ----------
    def _notify(self, title:str, msg:str):
        try: self.tray.showMessage(title, msg, QtWidgets.QSystemTrayIcon.Information, 3000)
        except Exception: pass

    def _set_result_title(self):
        now = datetime.now()
        txt = f"‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô ({now:%d/%m/%Y}) ‡πÄ‡∏ß‡∏•‡∏≤ {now:%H:%M} ‡∏ô. ‡∏´‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏•‡∏≥‡∏†‡∏π"
        self.result_banner.set_title(txt)
        self.card_result.title_lbl.setText(txt)

    # ---------- seq watcher ----------
    def _check_seq(self):
        cur=self.sched.seq()
        if cur!=self.seq_seen:
            self.seq_seen=cur
            self.sched.entries=self.sched._load()
            self.sched.or_rooms=self.sched._load_or()
            self._refresh_or_cb(self.cb_or)
            self._render_tree2()

class WrapItemDelegate(QtWidgets.QStyledItemDelegate):
    def paint(self, painter, option, index):
        text = index.data(QtCore.Qt.DisplayRole)
        opt = QtWidgets.QStyleOptionViewItem(option); self.initStyleOption(opt, index); opt.text=""
        style = opt.widget.style() if opt.widget else QtWidgets.QApplication.style()
        style.drawControl(QtWidgets.QStyle.CE_ItemViewItem, opt, painter, opt.widget)
        rect = style.subElementRect(QtWidgets.QStyle.SE_ItemViewItemText, opt, opt.widget)
        doc = QtGui.QTextDocument(); doc.setDefaultFont(opt.font)
        topt = QtGui.QTextOption(); topt.setWrapMode(QtGui.QTextOption.WordWrap); doc.setDefaultTextOption(topt)
        doc.setTextWidth(rect.width()); doc.setPlainText(str(text) if text is not None else "")
        painter.save(); painter.translate(rect.topLeft()); doc.drawContents(painter, QtCore.QRectF(0,0,rect.width(),rect.height())); painter.restore()
    def sizeHint(self, option, index):
        text = index.data(QtCore.Qt.DisplayRole) or ""
        doc = QtGui.QTextDocument(); doc.setDefaultFont(option.font)
        topt = QtGui.QTextOption(); topt.setWrapMode(QtGui.QTextOption.WordWrap); doc.setDefaultTextOption(topt)
        # ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á tree ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ï‡πà‡∏≥
        tree = option.widget if isinstance(option.widget, QtWidgets.QTreeWidget) else None
        col_w = tree.columnWidth(index.column()) if tree else option.rect.width()
        # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏¢‡∏∞‡∏Ç‡∏≠‡∏ö‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢
        w = max(120, int(col_w) - 12)
        doc.setTextWidth(w)
        doc.setPlainText(str(text))
        s = doc.size()
        return QtCore.QSize(w, int(s.height()) + 12)

class SearchSelectAdder(QtWidgets.QWidget):
    """Searchable selector with a multi-select list and change signal."""

    itemsChanged = QtCore.Signal(list)
    itemAdded = QtCore.Signal(str)   # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏° (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö seed)

    def __init__(self, placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ICD-10...", suggestions=None, parent=None):
        super().__init__(parent)
        v = QtWidgets.QVBoxLayout(self)
        v.setContentsMargins(0, 0, 0, 0)
        v.setSpacing(6)

        row = QtWidgets.QHBoxLayout()
        row.setSpacing(6)
        self.combo = NoWheelComboBox()  # ‡∏Å‡∏±‡∏ô scroll ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à
        self.combo.setEditable(True)
        self.combo.setInsertPolicy(QtWidgets.QComboBox.NoInsert)
        self.combo.setMinimumWidth(280)
        if self.combo.lineEdit():
            self.combo.lineEdit().setPlaceholderText(placeholder)
        self.btn = QtWidgets.QPushButton("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°")
        self.btn.setProperty("variant", "ghost")
        row.addWidget(self.combo, 1)
        row.addWidget(self.btn)
        v.addLayout(row)

        self.list = QtWidgets.QListWidget()
        self.list.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.list.setStyleSheet("QListWidget{ border:1px dashed #e6eaf2; border-radius:12px; background:#fff; }")
        v.addWidget(self.list)

        self.set_suggestions(suggestions or [])
        self.btn.clicked.connect(self._add_current)
        if self.combo.lineEdit():
            self.combo.lineEdit().returnPressed.connect(self._add_current)
        self.list.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.list.customContextMenuRequested.connect(self._ctx_menu)
        model = self.list.model()
        model.rowsInserted.connect(lambda *_: self._emit_items_changed())
        model.rowsRemoved.connect(lambda *_: self._emit_items_changed())

    def _ctx_menu(self, pos):
        menu = QtWidgets.QMenu(self)
        a1 = menu.addAction("‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
        a2 = menu.addAction("‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        act = menu.exec(self.list.mapToGlobal(pos))
        if act == a1:
            for it in self.list.selectedItems():
                self.list.takeItem(self.list.row(it))
        elif act == a2:
            self.list.clear()
        self._emit_items_changed()

    def _add_current(self):
        text = self.combo.currentText().strip()
        if text and text.lower() not in [self.list.item(i).text().lower() for i in range(self.list.count())]:
            self.list.addItem(text)
            # ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ù‡∏±‡πà‡∏á Main ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å seed
            self.itemAdded.emit(text)
        self.combo.setCurrentIndex(0)
        self.combo.setEditText("")
        self._emit_items_changed()

    def items(self) -> List[str]:
        return [self.list.item(i).text().strip() for i in range(self.list.count())]

    def clear(self):
        self.list.clear()
        self.combo.setCurrentIndex(0)
        self.combo.setEditText("")
        self._emit_items_changed()

    def set_suggestions(self, suggestions):
        options = sorted({s for s in suggestions if s})
        current = self.combo.currentText() if self.combo.count() else ""
        self.combo.blockSignals(True)
        self.combo.clear()
        self.combo.addItem("")
        self.combo.addItems(options)
        self.combo.blockSignals(False)
        if current:
            self.combo.setEditText(current)
        comp = QtWidgets.QCompleter(options)
        comp.setCaseSensitivity(QtCore.Qt.CaseInsensitive)
        comp.setFilterMode(QtCore.Qt.MatchContains)
        self.combo.setCompleter(comp)
        # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏•‡πâ‡∏≠‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏ö‡∏ô‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö (‡∏Å‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤)
        self.combo.setFocusPolicy(QtCore.Qt.StrongFocus)

    def _emit_items_changed(self):
        self.itemsChanged.emit(self.items())


def _get_seed_list(key: str, spec_key: str) -> list[str]:
    s = QSettings(ORG_NAME, APP_SETTINGS)
    m = s.value(key, {}) or {}
    if not isinstance(m, dict):
        m = {}
    arr = m.get(spec_key, []) or []
    if not isinstance(arr, list):
        arr = []
    return [str(x) for x in arr if str(x).strip()]


def _append_seed_item(key: str, spec_key: str, item: str):
    item = (item or "").strip()
    if not item:
        return
    s = QSettings(ORG_NAME, APP_SETTINGS)
    m = s.value(key, {}) or {}
    if not isinstance(m, dict):
        m = {}
    arr = m.get(spec_key, []) or []
    if item not in arr:
        arr.append(item)
        m[spec_key] = arr
        s.setValue(key, m)
        s.sync()


def main():
    QLocale.setDefault(QLocale("en_US"))
    app=QtWidgets.QApplication(sys.argv); app.setApplicationName("RegistryPatientConnect"); app.setOrganizationName(ORG_NAME); app.setWindowIcon(_load_app_icon())
    ap=argparse.ArgumentParser(); ap.add_argument("--host",default="127.0.0.1"); ap.add_argument("--port",type=int,default=DEFAULT_PORT); ap.add_argument("--token",default=DEFAULT_TOKEN)
    a=ap.parse_args()
    w=Main(a.host,a.port,a.token); w.show(); sys.exit(app.exec())

if __name__=="__main__":
    main()
